// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nvx::{VkObjectTable,RawVkObjectTable};
use vulkan::nvx::{VkIndirectCommandsLayout,RawVkIndirectCommandsLayout};
use vulkan::nvx::{VkIndirectCommandsToken,RawVkIndirectCommandsToken};
use vulkan::vk::{VkCommandBuffer,RawVkCommandBuffer};
use vulkan::vk::{VkBuffer,RawVkBuffer};

/// Wrapper for [VkCmdProcessCommandsInfoNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkCmdProcessCommandsInfoNVX.html).
#[derive(Debug, Clone)]
pub struct VkCmdProcessCommandsInfo {
    pub object_table: VkObjectTable,
    pub indirect_commands_layout: VkIndirectCommandsLayout,
    pub indirect_commands_tokens: Vec<VkIndirectCommandsToken>,
    pub max_sequences_count: usize,
    pub target_command_buffer: Option<VkCommandBuffer>,
    pub sequences_count_buffer: Option<VkBuffer>,
    pub sequences_count_offset: usize,
    pub sequences_index_buffer: Option<VkBuffer>,
    pub sequences_index_offset: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkCmdProcessCommandsInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub object_table: RawVkObjectTable,
    pub indirect_commands_layout: RawVkIndirectCommandsLayout,
    pub indirect_commands_token_count: u32,
    pub indirect_commands_tokens: *mut RawVkIndirectCommandsToken,
    pub max_sequences_count: u32,
    pub target_command_buffer: RawVkCommandBuffer,
    pub sequences_count_buffer: RawVkBuffer,
    pub sequences_count_offset: u64,
    pub sequences_index_buffer: RawVkBuffer,
    pub sequences_index_offset: u64,
}

impl VkWrappedType<RawVkCmdProcessCommandsInfo> for VkCmdProcessCommandsInfo {
    fn vk_to_raw(src: &VkCmdProcessCommandsInfo, dst: &mut RawVkCmdProcessCommandsInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::CmdProcessCommandsInfoNvx);
        dst.next = ptr::null_mut();
        dst.object_table = vk_to_raw_value(&src.object_table);
        dst.indirect_commands_layout = vk_to_raw_value(&src.indirect_commands_layout);
        dst.indirect_commands_token_count = src.indirect_commands_tokens.len() as u32;
        dst.indirect_commands_tokens = new_ptr_vk_array(&src.indirect_commands_tokens);
        dst.max_sequences_count = vk_to_raw_value(&src.max_sequences_count);
        dst.target_command_buffer = vk_to_raw_value_checked(&src.target_command_buffer);
        dst.sequences_count_buffer = vk_to_raw_value_checked(&src.sequences_count_buffer);
        dst.sequences_count_offset = vk_to_raw_value(&src.sequences_count_offset);
        dst.sequences_index_buffer = vk_to_raw_value_checked(&src.sequences_index_buffer);
        dst.sequences_index_offset = vk_to_raw_value(&src.sequences_index_offset);
    }
}

impl VkRawType<VkCmdProcessCommandsInfo> for RawVkCmdProcessCommandsInfo {
    fn vk_to_wrapped(src: &RawVkCmdProcessCommandsInfo) -> VkCmdProcessCommandsInfo {
        VkCmdProcessCommandsInfo {
            object_table: RawVkObjectTable::vk_to_wrapped(&src.object_table),
            indirect_commands_layout: RawVkIndirectCommandsLayout::vk_to_wrapped(&src.indirect_commands_layout),
            indirect_commands_tokens: new_vk_array(src.indirect_commands_token_count, src.indirect_commands_tokens),
            max_sequences_count: u32::vk_to_wrapped(&src.max_sequences_count),
            target_command_buffer: Some(RawVkCommandBuffer::vk_to_wrapped(&src.target_command_buffer)),
            sequences_count_buffer: Some(RawVkBuffer::vk_to_wrapped(&src.sequences_count_buffer)),
            sequences_count_offset: u64::vk_to_wrapped(&src.sequences_count_offset),
            sequences_index_buffer: Some(RawVkBuffer::vk_to_wrapped(&src.sequences_index_buffer)),
            sequences_index_offset: u64::vk_to_wrapped(&src.sequences_index_offset),
        }
    }
}

impl Default for VkCmdProcessCommandsInfo {
    fn default() -> VkCmdProcessCommandsInfo {
        VkCmdProcessCommandsInfo {
            object_table: Default::default(),
            indirect_commands_layout: Default::default(),
            indirect_commands_tokens: Vec::new(),
            max_sequences_count: 0,
            target_command_buffer: None,
            sequences_count_buffer: None,
            sequences_count_offset: 0,
            sequences_index_buffer: None,
            sequences_index_offset: 0,
        }
    }
}

impl VkSetup for VkCmdProcessCommandsInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.object_table, fn_table);
        VkSetup::vk_setup(&mut self.indirect_commands_layout, fn_table);
    }
}

impl VkFree for RawVkCmdProcessCommandsInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.indirect_commands_token_count as usize, self.indirect_commands_tokens);
    }
}