// Generated by `scripts/generate.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vulkan::*;
use vulkan::vk::*;

#[doc(hidden)]
pub type RawVkObjectTable = u64;

/// Wrapper for [VkObjectTableNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkObjectTableNVX.html).
#[derive(Debug, Clone, Copy)]
pub struct VkObjectTable {
    _handle: RawVkObjectTable,
    _fn_table: *mut VkFunctionTable
}

impl VkRawType<VkObjectTable> for RawVkObjectTable {
    fn vk_to_wrapped(src: &RawVkObjectTable) -> VkObjectTable {
        VkObjectTable {
            _handle: *src,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkObjectTable> for VkObjectTable {
    fn vk_to_raw(src: &VkObjectTable, dst: &mut RawVkObjectTable) {
        *dst = src._handle
    }
}

impl Default for VkObjectTable {
    fn default() -> VkObjectTable {
        VkObjectTable {
            _handle: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkObjectTable {
    fn eq(&self, other: &VkObjectTable) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkObjectTable {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        self._fn_table = fn_table;
    }
}

impl VkObjectTable {
    
    /// Returns the internal Vulkan handle for the object.
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
    
    /// Wrapper for [vkDestroyObjectTableNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkDestroyObjectTableNVX.html).
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroyObjectTableNVX)((*self._fn_table).device, self._handle, ptr::null());
        }
    }
    
    /// Wrapper for [vkRegisterObjectsNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkRegisterObjectsNVX.html).
    pub fn register_objects(&self, object_table_entries: Vec<nvx::VkObjectTableEntry>, object_indices: Vec<usize>) -> Result<(), VkResult> {
        unsafe {
            let raw_object_count = cmp::max(object_table_entries.len(), object_indices.len()) as u32;
            let raw_object_table_entries = new_ptr_vk_array_array(&object_table_entries);
            let raw_object_indices = new_ptr_vk_array(&object_indices);
            let vk_result = ((&*self._fn_table).vkRegisterObjectsNVX)((*self._fn_table).device, self._handle, raw_object_count, raw_object_table_entries, raw_object_indices);
            free_vk_ptr_array_array(raw_object_count as usize, raw_object_table_entries);
            free_ptr(raw_object_indices);
            if vk_result == 0 { Ok(()) } else { Err(RawVkResult::vk_to_wrapped(&vk_result)) }
        }
    }
    
    /// Wrapper for [vkUnregisterObjectsNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkUnregisterObjectsNVX.html).
    pub fn unregister_objects(&self, object_entry_types: Vec<nvx::VkObjectEntryType>, object_indices: Vec<usize>) -> Result<(), VkResult> {
        unsafe {
            let raw_object_count = cmp::max(object_entry_types.len(), object_indices.len()) as u32;
            let raw_object_entry_types = new_ptr_vk_array(&object_entry_types);
            let raw_object_indices = new_ptr_vk_array(&object_indices);
            let vk_result = ((&*self._fn_table).vkUnregisterObjectsNVX)((*self._fn_table).device, self._handle, raw_object_count, raw_object_entry_types, raw_object_indices);
            free_ptr(raw_object_entry_types);
            free_ptr(raw_object_indices);
            if vk_result == 0 { Ok(()) } else { Err(RawVkResult::vk_to_wrapped(&vk_result)) }
        }
    }
}