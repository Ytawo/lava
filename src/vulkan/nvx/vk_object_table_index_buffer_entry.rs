// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::nvx::{VkObjectEntryType,RawVkObjectEntryType};
use vulkan::nvx::{VkObjectEntryUsageFlags,RawVkObjectEntryUsageFlags};
use vulkan::vk::{VkBuffer,RawVkBuffer};
use vulkan::vk::{VkIndexType,RawVkIndexType};

/// Wrapper for [VkObjectTableIndexBufferEntryNVX](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkObjectTableIndexBufferEntryNVX.html).
#[derive(Debug, Clone)]
pub struct VkObjectTableIndexBufferEntry {
    pub type_: VkObjectEntryType,
    pub flags: VkObjectEntryUsageFlags,
    pub buffer: VkBuffer,
    pub index_type: VkIndexType,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkObjectTableIndexBufferEntry {
    pub type_: RawVkObjectEntryType,
    pub flags: RawVkObjectEntryUsageFlags,
    pub buffer: RawVkBuffer,
    pub index_type: RawVkIndexType,
}

impl VkWrappedType<RawVkObjectTableIndexBufferEntry> for VkObjectTableIndexBufferEntry {
    fn vk_to_raw(src: &VkObjectTableIndexBufferEntry, dst: &mut RawVkObjectTableIndexBufferEntry) {
        dst.type_ = vk_to_raw_value(&src.type_);
        dst.flags = vk_to_raw_value(&src.flags);
        dst.buffer = vk_to_raw_value(&src.buffer);
        dst.index_type = vk_to_raw_value(&src.index_type);
    }
}

impl VkRawType<VkObjectTableIndexBufferEntry> for RawVkObjectTableIndexBufferEntry {
    fn vk_to_wrapped(src: &RawVkObjectTableIndexBufferEntry) -> VkObjectTableIndexBufferEntry {
        VkObjectTableIndexBufferEntry {
            type_: RawVkObjectEntryType::vk_to_wrapped(&src.type_),
            flags: RawVkObjectEntryUsageFlags::vk_to_wrapped(&src.flags),
            buffer: RawVkBuffer::vk_to_wrapped(&src.buffer),
            index_type: RawVkIndexType::vk_to_wrapped(&src.index_type),
        }
    }
}

impl Default for VkObjectTableIndexBufferEntry {
    fn default() -> VkObjectTableIndexBufferEntry {
        VkObjectTableIndexBufferEntry {
            type_: Default::default(),
            flags: Default::default(),
            buffer: Default::default(),
            index_type: Default::default(),
        }
    }
}

impl VkSetup for VkObjectTableIndexBufferEntry {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.buffer, fn_table);
    }
}

impl VkFree for RawVkObjectTableIndexBufferEntry {
    fn vk_free(&self) {
        
    }
}