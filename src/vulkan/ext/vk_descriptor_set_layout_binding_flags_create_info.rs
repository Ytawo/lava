// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkDescriptorBindingFlags,RawVkDescriptorBindingFlags};

/// Wrapper for [VkDescriptorSetLayoutBindingFlagsCreateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    pub binding_flags: Option<Vec<VkDescriptorBindingFlags>>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDescriptorSetLayoutBindingFlagsCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub binding_count: u32,
    pub binding_flags: *mut RawVkDescriptorBindingFlags,
}

impl VkWrappedType<RawVkDescriptorSetLayoutBindingFlagsCreateInfo> for VkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn vk_to_raw(src: &VkDescriptorSetLayoutBindingFlagsCreateInfo, dst: &mut RawVkDescriptorSetLayoutBindingFlagsCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DescriptorSetLayoutBindingFlagsCreateInfoExt);
        dst.next = ptr::null_mut();
        dst.binding_count = get_array_option_len(&src.binding_flags) as u32;
        dst.binding_flags = new_ptr_vk_array_checked(&src.binding_flags);
    }
}

impl VkRawType<VkDescriptorSetLayoutBindingFlagsCreateInfo> for RawVkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn vk_to_wrapped(src: &RawVkDescriptorSetLayoutBindingFlagsCreateInfo) -> VkDescriptorSetLayoutBindingFlagsCreateInfo {
        VkDescriptorSetLayoutBindingFlagsCreateInfo {
            binding_flags: new_vk_array_checked(src.binding_count, src.binding_flags),
        }
    }
}

impl Default for VkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn default() -> VkDescriptorSetLayoutBindingFlagsCreateInfo {
        VkDescriptorSetLayoutBindingFlagsCreateInfo {
            binding_flags: None,
        }
    }
}

impl VkSetup for VkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn vk_free(&self) {
        free_ptr(self.binding_flags);
    }
}