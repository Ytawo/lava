// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedProperties {
    pub advanced_blend_max_color_attachments: usize,
    pub advanced_blend_independent_blend: bool,
    pub advanced_blend_non_premultiplied_src_color: bool,
    pub advanced_blend_non_premultiplied_dst_color: bool,
    pub advanced_blend_correlated_overlap: bool,
    pub advanced_blend_all_operations: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceBlendOperationAdvancedProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub advanced_blend_max_color_attachments: u32,
    pub advanced_blend_independent_blend: u32,
    pub advanced_blend_non_premultiplied_src_color: u32,
    pub advanced_blend_non_premultiplied_dst_color: u32,
    pub advanced_blend_correlated_overlap: u32,
    pub advanced_blend_all_operations: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceBlendOperationAdvancedProperties> for VkPhysicalDeviceBlendOperationAdvancedProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceBlendOperationAdvancedProperties, dst: &mut RawVkPhysicalDeviceBlendOperationAdvancedProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceBlendOperationAdvancedPropertiesExt);
        dst.next = ptr::null_mut();
        dst.advanced_blend_max_color_attachments = vk_to_raw_value(&src.advanced_blend_max_color_attachments);
        dst.advanced_blend_independent_blend = vk_to_raw_value(&src.advanced_blend_independent_blend);
        dst.advanced_blend_non_premultiplied_src_color = vk_to_raw_value(&src.advanced_blend_non_premultiplied_src_color);
        dst.advanced_blend_non_premultiplied_dst_color = vk_to_raw_value(&src.advanced_blend_non_premultiplied_dst_color);
        dst.advanced_blend_correlated_overlap = vk_to_raw_value(&src.advanced_blend_correlated_overlap);
        dst.advanced_blend_all_operations = vk_to_raw_value(&src.advanced_blend_all_operations);
    }
}

impl VkRawType<VkPhysicalDeviceBlendOperationAdvancedProperties> for RawVkPhysicalDeviceBlendOperationAdvancedProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceBlendOperationAdvancedProperties) -> VkPhysicalDeviceBlendOperationAdvancedProperties {
        VkPhysicalDeviceBlendOperationAdvancedProperties {
            advanced_blend_max_color_attachments: u32::vk_to_wrapped(&src.advanced_blend_max_color_attachments),
            advanced_blend_independent_blend: u32::vk_to_wrapped(&src.advanced_blend_independent_blend),
            advanced_blend_non_premultiplied_src_color: u32::vk_to_wrapped(&src.advanced_blend_non_premultiplied_src_color),
            advanced_blend_non_premultiplied_dst_color: u32::vk_to_wrapped(&src.advanced_blend_non_premultiplied_dst_color),
            advanced_blend_correlated_overlap: u32::vk_to_wrapped(&src.advanced_blend_correlated_overlap),
            advanced_blend_all_operations: u32::vk_to_wrapped(&src.advanced_blend_all_operations),
        }
    }
}

impl Default for VkPhysicalDeviceBlendOperationAdvancedProperties {
    fn default() -> VkPhysicalDeviceBlendOperationAdvancedProperties {
        VkPhysicalDeviceBlendOperationAdvancedProperties {
            advanced_blend_max_color_attachments: 0,
            advanced_blend_independent_blend: false,
            advanced_blend_non_premultiplied_src_color: false,
            advanced_blend_non_premultiplied_dst_color: false,
            advanced_blend_correlated_overlap: false,
            advanced_blend_all_operations: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceBlendOperationAdvancedProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceBlendOperationAdvancedProperties {
    fn vk_free(&self) {
        
    }
}