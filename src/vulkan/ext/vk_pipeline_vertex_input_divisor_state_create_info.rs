// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkVertexInputBindingDivisorDescription,RawVkVertexInputBindingDivisorDescription};

/// Wrapper for [VkPipelineVertexInputDivisorStateCreateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPipelineVertexInputDivisorStateCreateInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkPipelineVertexInputDivisorStateCreateInfo {
    pub vertex_binding_divisors: Vec<VkVertexInputBindingDivisorDescription>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineVertexInputDivisorStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub vertex_binding_divisor_count: u32,
    pub vertex_binding_divisors: *mut RawVkVertexInputBindingDivisorDescription,
}

impl VkWrappedType<RawVkPipelineVertexInputDivisorStateCreateInfo> for VkPipelineVertexInputDivisorStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineVertexInputDivisorStateCreateInfo, dst: &mut RawVkPipelineVertexInputDivisorStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineVertexInputDivisorStateCreateInfoExt);
        dst.next = ptr::null_mut();
        dst.vertex_binding_divisor_count = src.vertex_binding_divisors.len() as u32;
        dst.vertex_binding_divisors = new_ptr_vk_array(&src.vertex_binding_divisors);
    }
}

impl VkRawType<VkPipelineVertexInputDivisorStateCreateInfo> for RawVkPipelineVertexInputDivisorStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineVertexInputDivisorStateCreateInfo) -> VkPipelineVertexInputDivisorStateCreateInfo {
        VkPipelineVertexInputDivisorStateCreateInfo {
            vertex_binding_divisors: new_vk_array(src.vertex_binding_divisor_count, src.vertex_binding_divisors),
        }
    }
}

impl Default for VkPipelineVertexInputDivisorStateCreateInfo {
    fn default() -> VkPipelineVertexInputDivisorStateCreateInfo {
        VkPipelineVertexInputDivisorStateCreateInfo {
            vertex_binding_divisors: Vec::new(),
        }
    }
}

impl VkSetup for VkPipelineVertexInputDivisorStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineVertexInputDivisorStateCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.vertex_binding_divisor_count as usize, self.vertex_binding_divisors);
    }
}