// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceFragmentDensityMapFeaturesEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceFragmentDensityMapFeaturesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapFeatures {
    pub fragment_density_map: bool,
    pub fragment_density_map_dynamic: bool,
    pub fragment_density_map_non_subsampled_images: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceFragmentDensityMapFeatures {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub fragment_density_map: u32,
    pub fragment_density_map_dynamic: u32,
    pub fragment_density_map_non_subsampled_images: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceFragmentDensityMapFeatures> for VkPhysicalDeviceFragmentDensityMapFeatures {
    fn vk_to_raw(src: &VkPhysicalDeviceFragmentDensityMapFeatures, dst: &mut RawVkPhysicalDeviceFragmentDensityMapFeatures) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceFragmentDensityMapFeaturesExt);
        dst.next = ptr::null_mut();
        dst.fragment_density_map = vk_to_raw_value(&src.fragment_density_map);
        dst.fragment_density_map_dynamic = vk_to_raw_value(&src.fragment_density_map_dynamic);
        dst.fragment_density_map_non_subsampled_images = vk_to_raw_value(&src.fragment_density_map_non_subsampled_images);
    }
}

impl VkRawType<VkPhysicalDeviceFragmentDensityMapFeatures> for RawVkPhysicalDeviceFragmentDensityMapFeatures {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceFragmentDensityMapFeatures) -> VkPhysicalDeviceFragmentDensityMapFeatures {
        VkPhysicalDeviceFragmentDensityMapFeatures {
            fragment_density_map: u32::vk_to_wrapped(&src.fragment_density_map),
            fragment_density_map_dynamic: u32::vk_to_wrapped(&src.fragment_density_map_dynamic),
            fragment_density_map_non_subsampled_images: u32::vk_to_wrapped(&src.fragment_density_map_non_subsampled_images),
        }
    }
}

impl Default for VkPhysicalDeviceFragmentDensityMapFeatures {
    fn default() -> VkPhysicalDeviceFragmentDensityMapFeatures {
        VkPhysicalDeviceFragmentDensityMapFeatures {
            fragment_density_map: false,
            fragment_density_map_dynamic: false,
            fragment_density_map_non_subsampled_images: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceFragmentDensityMapFeatures {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceFragmentDensityMapFeatures {
    fn vk_free(&self) {
        
    }
}