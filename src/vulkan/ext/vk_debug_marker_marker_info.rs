// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkDebugMarkerMarkerInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDebugMarkerMarkerInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkDebugMarkerMarkerInfo<'a> {
    pub marker_name: &'a str,
    pub color: [f32; 4],
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDebugMarkerMarkerInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub marker_name: *mut c_char,
    pub color: [f32; 4],
}

impl<'a> VkWrappedType<RawVkDebugMarkerMarkerInfo> for VkDebugMarkerMarkerInfo<'a> {
    fn vk_to_raw(src: &VkDebugMarkerMarkerInfo, dst: &mut RawVkDebugMarkerMarkerInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DebugMarkerMarkerInfoExt);
        dst.next = ptr::null_mut();
        dst.marker_name = new_ptr_string(src.marker_name);
        dst.color = unsafe { let mut dst_array : [f32; 4] = mem::uninitialized(); to_array(&src.color, &mut dst_array); dst_array };
    }
}

impl<'a> VkRawType<VkDebugMarkerMarkerInfo<'a>> for RawVkDebugMarkerMarkerInfo {
    fn vk_to_wrapped(src: &RawVkDebugMarkerMarkerInfo) -> VkDebugMarkerMarkerInfo<'a> {
        VkDebugMarkerMarkerInfo {
            marker_name: new_string_ref(src.marker_name),
            color: unsafe { let mut dst_array : [f32; 4] = mem::uninitialized(); to_array(&src.color, &mut dst_array); dst_array },
        }
    }
}

impl Default for VkDebugMarkerMarkerInfo<'static> {
    fn default() -> VkDebugMarkerMarkerInfo<'static> {
        VkDebugMarkerMarkerInfo {
            marker_name: "",
            color: [0.0; 4],
        }
    }
}

impl<'a> VkSetup for VkDebugMarkerMarkerInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDebugMarkerMarkerInfo {
    fn vk_free(&self) {
        free_ptr(self.marker_name);
    }
}