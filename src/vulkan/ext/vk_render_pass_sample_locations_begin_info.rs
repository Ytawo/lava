// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkAttachmentSampleLocations,RawVkAttachmentSampleLocations};
use vulkan::ext::{VkSubpassSampleLocations,RawVkSubpassSampleLocations};

/// Wrapper for [VkRenderPassSampleLocationsBeginInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRenderPassSampleLocationsBeginInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassSampleLocationsBeginInfo {
    pub attachment_initial_sample_locations: Vec<VkAttachmentSampleLocations>,
    pub post_subpass_sample_locations: Vec<VkSubpassSampleLocations>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassSampleLocationsBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub attachment_initial_sample_locations_count: u32,
    pub attachment_initial_sample_locations: *mut RawVkAttachmentSampleLocations,
    pub post_subpass_sample_locations_count: u32,
    pub post_subpass_sample_locations: *mut RawVkSubpassSampleLocations,
}

impl VkWrappedType<RawVkRenderPassSampleLocationsBeginInfo> for VkRenderPassSampleLocationsBeginInfo {
    fn vk_to_raw(src: &VkRenderPassSampleLocationsBeginInfo, dst: &mut RawVkRenderPassSampleLocationsBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassSampleLocationsBeginInfoExt);
        dst.next = ptr::null_mut();
        dst.attachment_initial_sample_locations_count = src.attachment_initial_sample_locations.len() as u32;
        dst.attachment_initial_sample_locations = new_ptr_vk_array(&src.attachment_initial_sample_locations);
        dst.post_subpass_sample_locations_count = src.post_subpass_sample_locations.len() as u32;
        dst.post_subpass_sample_locations = new_ptr_vk_array(&src.post_subpass_sample_locations);
    }
}

impl VkRawType<VkRenderPassSampleLocationsBeginInfo> for RawVkRenderPassSampleLocationsBeginInfo {
    fn vk_to_wrapped(src: &RawVkRenderPassSampleLocationsBeginInfo) -> VkRenderPassSampleLocationsBeginInfo {
        VkRenderPassSampleLocationsBeginInfo {
            attachment_initial_sample_locations: new_vk_array(src.attachment_initial_sample_locations_count, src.attachment_initial_sample_locations),
            post_subpass_sample_locations: new_vk_array(src.post_subpass_sample_locations_count, src.post_subpass_sample_locations),
        }
    }
}

impl Default for VkRenderPassSampleLocationsBeginInfo {
    fn default() -> VkRenderPassSampleLocationsBeginInfo {
        VkRenderPassSampleLocationsBeginInfo {
            attachment_initial_sample_locations: Vec::new(),
            post_subpass_sample_locations: Vec::new(),
        }
    }
}

impl VkSetup for VkRenderPassSampleLocationsBeginInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkRenderPassSampleLocationsBeginInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.attachment_initial_sample_locations_count as usize, self.attachment_initial_sample_locations);
        free_vk_ptr_array(self.post_subpass_sample_locations_count as usize, self.post_subpass_sample_locations);
    }
}