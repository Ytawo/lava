// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkValidationCache,RawVkValidationCache};

/// Wrapper for [VkShaderModuleValidationCacheCreateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkShaderModuleValidationCacheCreateInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkShaderModuleValidationCacheCreateInfo {
    pub validation_cache: VkValidationCache,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkShaderModuleValidationCacheCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub validation_cache: RawVkValidationCache,
}

impl VkWrappedType<RawVkShaderModuleValidationCacheCreateInfo> for VkShaderModuleValidationCacheCreateInfo {
    fn vk_to_raw(src: &VkShaderModuleValidationCacheCreateInfo, dst: &mut RawVkShaderModuleValidationCacheCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ShaderModuleValidationCacheCreateInfoExt);
        dst.next = ptr::null_mut();
        dst.validation_cache = vk_to_raw_value(&src.validation_cache);
    }
}

impl VkRawType<VkShaderModuleValidationCacheCreateInfo> for RawVkShaderModuleValidationCacheCreateInfo {
    fn vk_to_wrapped(src: &RawVkShaderModuleValidationCacheCreateInfo) -> VkShaderModuleValidationCacheCreateInfo {
        VkShaderModuleValidationCacheCreateInfo {
            validation_cache: RawVkValidationCache::vk_to_wrapped(&src.validation_cache),
        }
    }
}

impl Default for VkShaderModuleValidationCacheCreateInfo {
    fn default() -> VkShaderModuleValidationCacheCreateInfo {
        VkShaderModuleValidationCacheCreateInfo {
            validation_cache: Default::default(),
        }
    }
}

impl VkSetup for VkShaderModuleValidationCacheCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.validation_cache, fn_table);
    }
}

impl VkFree for RawVkShaderModuleValidationCacheCreateInfo {
    fn vk_free(&self) {
        
    }
}