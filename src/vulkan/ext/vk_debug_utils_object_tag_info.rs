// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkObjectType,RawVkObjectType};

/// Wrapper for [VkDebugUtilsObjectTagInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDebugUtilsObjectTagInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkDebugUtilsObjectTagInfo<'a> {
    pub object_type: VkObjectType,
    pub object_handle: usize,
    pub tag_name: usize,
    pub tag: &'a [c_void],
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDebugUtilsObjectTagInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub object_type: RawVkObjectType,
    pub object_handle: u64,
    pub tag_name: u64,
    pub tag_size: usize,
    pub tag: *mut c_void,
}

impl<'a> VkWrappedType<RawVkDebugUtilsObjectTagInfo> for VkDebugUtilsObjectTagInfo<'a> {
    fn vk_to_raw(src: &VkDebugUtilsObjectTagInfo, dst: &mut RawVkDebugUtilsObjectTagInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DebugUtilsObjectTagInfoExt);
        dst.next = ptr::null_mut();
        dst.object_type = vk_to_raw_value(&src.object_type);
        dst.object_handle = vk_to_raw_value(&src.object_handle);
        dst.tag_name = vk_to_raw_value(&src.tag_name);
        dst.tag_size = src.tag.len();
        dst.tag = get_vec_ptr(src.tag);
    }
}

impl<'a> VkRawType<VkDebugUtilsObjectTagInfo<'a>> for RawVkDebugUtilsObjectTagInfo {
    fn vk_to_wrapped(src: &RawVkDebugUtilsObjectTagInfo) -> VkDebugUtilsObjectTagInfo<'a> {
        VkDebugUtilsObjectTagInfo {
            object_type: RawVkObjectType::vk_to_wrapped(&src.object_type),
            object_handle: u64::vk_to_wrapped(&src.object_handle),
            tag_name: u64::vk_to_wrapped(&src.tag_name),
            tag: slice_from_ptr(src.tag_size as usize, src.tag),
        }
    }
}

impl Default for VkDebugUtilsObjectTagInfo<'static> {
    fn default() -> VkDebugUtilsObjectTagInfo<'static> {
        VkDebugUtilsObjectTagInfo {
            object_type: Default::default(),
            object_handle: 0,
            tag_name: 0,
            tag: &[],
        }
    }
}

impl<'a> VkSetup for VkDebugUtilsObjectTagInfo<'a> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDebugUtilsObjectTagInfo {
    fn vk_free(&self) {
        
    }
}