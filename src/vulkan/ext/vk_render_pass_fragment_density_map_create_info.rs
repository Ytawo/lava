// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkAttachmentReference,RawVkAttachmentReference};

/// Wrapper for [VkRenderPassFragmentDensityMapCreateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRenderPassFragmentDensityMapCreateInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfo {
    pub fragment_density_map_attachment: VkAttachmentReference,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassFragmentDensityMapCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub fragment_density_map_attachment: RawVkAttachmentReference,
}

impl VkWrappedType<RawVkRenderPassFragmentDensityMapCreateInfo> for VkRenderPassFragmentDensityMapCreateInfo {
    fn vk_to_raw(src: &VkRenderPassFragmentDensityMapCreateInfo, dst: &mut RawVkRenderPassFragmentDensityMapCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassFragmentDensityMapCreateInfoExt);
        dst.next = ptr::null_mut();
        dst.fragment_density_map_attachment = vk_to_raw_value(&src.fragment_density_map_attachment);
    }
}

impl VkRawType<VkRenderPassFragmentDensityMapCreateInfo> for RawVkRenderPassFragmentDensityMapCreateInfo {
    fn vk_to_wrapped(src: &RawVkRenderPassFragmentDensityMapCreateInfo) -> VkRenderPassFragmentDensityMapCreateInfo {
        VkRenderPassFragmentDensityMapCreateInfo {
            fragment_density_map_attachment: RawVkAttachmentReference::vk_to_wrapped(&src.fragment_density_map_attachment),
        }
    }
}

impl Default for VkRenderPassFragmentDensityMapCreateInfo {
    fn default() -> VkRenderPassFragmentDensityMapCreateInfo {
        VkRenderPassFragmentDensityMapCreateInfo {
            fragment_density_map_attachment: Default::default(),
        }
    }
}

impl VkSetup for VkRenderPassFragmentDensityMapCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.fragment_density_map_attachment, fn_table);
    }
}

impl VkFree for RawVkRenderPassFragmentDensityMapCreateInfo {
    fn vk_free(&self) {
        
    }
}