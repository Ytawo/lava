// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkDescriptorSetVariableDescriptorCountAllocateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    pub descriptor_counts: Vec<usize>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDescriptorSetVariableDescriptorCountAllocateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub descriptor_set_count: u32,
    pub descriptor_counts: *mut u32,
}

impl VkWrappedType<RawVkDescriptorSetVariableDescriptorCountAllocateInfo> for VkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn vk_to_raw(src: &VkDescriptorSetVariableDescriptorCountAllocateInfo, dst: &mut RawVkDescriptorSetVariableDescriptorCountAllocateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DescriptorSetVariableDescriptorCountAllocateInfoExt);
        dst.next = ptr::null_mut();
        dst.descriptor_set_count = src.descriptor_counts.len() as u32;
        dst.descriptor_counts = new_ptr_vk_array(&src.descriptor_counts);
    }
}

impl VkRawType<VkDescriptorSetVariableDescriptorCountAllocateInfo> for RawVkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn vk_to_wrapped(src: &RawVkDescriptorSetVariableDescriptorCountAllocateInfo) -> VkDescriptorSetVariableDescriptorCountAllocateInfo {
        VkDescriptorSetVariableDescriptorCountAllocateInfo {
            descriptor_counts: new_vk_array(src.descriptor_set_count, src.descriptor_counts),
        }
    }
}

impl Default for VkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn default() -> VkDescriptorSetVariableDescriptorCountAllocateInfo {
        VkDescriptorSetVariableDescriptorCountAllocateInfo {
            descriptor_counts: Vec::new(),
        }
    }
}

impl VkSetup for VkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn vk_free(&self) {
        free_ptr(self.descriptor_counts);
    }
}