// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkExtent2D,RawVkExtent2D};

/// Wrapper for [VkPhysicalDeviceFragmentDensityMapPropertiesEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceFragmentDensityMapPropertiesEXT.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapProperties {
    pub min_fragment_density_texel_size: VkExtent2D,
    pub max_fragment_density_texel_size: VkExtent2D,
    pub fragment_density_invocations: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceFragmentDensityMapProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub min_fragment_density_texel_size: RawVkExtent2D,
    pub max_fragment_density_texel_size: RawVkExtent2D,
    pub fragment_density_invocations: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceFragmentDensityMapProperties> for VkPhysicalDeviceFragmentDensityMapProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceFragmentDensityMapProperties, dst: &mut RawVkPhysicalDeviceFragmentDensityMapProperties) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceFragmentDensityMapPropertiesExt);
        dst.next = ptr::null_mut();
        dst.min_fragment_density_texel_size = vk_to_raw_value(&src.min_fragment_density_texel_size);
        dst.max_fragment_density_texel_size = vk_to_raw_value(&src.max_fragment_density_texel_size);
        dst.fragment_density_invocations = vk_to_raw_value(&src.fragment_density_invocations);
    }
}

impl VkRawType<VkPhysicalDeviceFragmentDensityMapProperties> for RawVkPhysicalDeviceFragmentDensityMapProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceFragmentDensityMapProperties) -> VkPhysicalDeviceFragmentDensityMapProperties {
        VkPhysicalDeviceFragmentDensityMapProperties {
            min_fragment_density_texel_size: RawVkExtent2D::vk_to_wrapped(&src.min_fragment_density_texel_size),
            max_fragment_density_texel_size: RawVkExtent2D::vk_to_wrapped(&src.max_fragment_density_texel_size),
            fragment_density_invocations: u32::vk_to_wrapped(&src.fragment_density_invocations),
        }
    }
}

impl Default for VkPhysicalDeviceFragmentDensityMapProperties {
    fn default() -> VkPhysicalDeviceFragmentDensityMapProperties {
        VkPhysicalDeviceFragmentDensityMapProperties {
            min_fragment_density_texel_size: Default::default(),
            max_fragment_density_texel_size: Default::default(),
            fragment_density_invocations: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceFragmentDensityMapProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.min_fragment_density_texel_size, fn_table);
        VkSetup::vk_setup(&mut self.max_fragment_density_texel_size, fn_table);
    }
}

impl VkFree for RawVkPhysicalDeviceFragmentDensityMapProperties {
    fn vk_free(&self) {
        
    }
}