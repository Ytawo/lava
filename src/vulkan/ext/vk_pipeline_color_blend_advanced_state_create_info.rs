// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkBlendOverlap,RawVkBlendOverlap};

/// Wrapper for [VkPipelineColorBlendAdvancedStateCreateInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPipelineColorBlendAdvancedStateCreateInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfo {
    pub src_premultiplied: bool,
    pub dst_premultiplied: bool,
    pub blend_overlap: VkBlendOverlap,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineColorBlendAdvancedStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub src_premultiplied: u32,
    pub dst_premultiplied: u32,
    pub blend_overlap: RawVkBlendOverlap,
}

impl VkWrappedType<RawVkPipelineColorBlendAdvancedStateCreateInfo> for VkPipelineColorBlendAdvancedStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineColorBlendAdvancedStateCreateInfo, dst: &mut RawVkPipelineColorBlendAdvancedStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineColorBlendAdvancedStateCreateInfoExt);
        dst.next = ptr::null_mut();
        dst.src_premultiplied = vk_to_raw_value(&src.src_premultiplied);
        dst.dst_premultiplied = vk_to_raw_value(&src.dst_premultiplied);
        dst.blend_overlap = vk_to_raw_value(&src.blend_overlap);
    }
}

impl VkRawType<VkPipelineColorBlendAdvancedStateCreateInfo> for RawVkPipelineColorBlendAdvancedStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineColorBlendAdvancedStateCreateInfo) -> VkPipelineColorBlendAdvancedStateCreateInfo {
        VkPipelineColorBlendAdvancedStateCreateInfo {
            src_premultiplied: u32::vk_to_wrapped(&src.src_premultiplied),
            dst_premultiplied: u32::vk_to_wrapped(&src.dst_premultiplied),
            blend_overlap: RawVkBlendOverlap::vk_to_wrapped(&src.blend_overlap),
        }
    }
}

impl Default for VkPipelineColorBlendAdvancedStateCreateInfo {
    fn default() -> VkPipelineColorBlendAdvancedStateCreateInfo {
        VkPipelineColorBlendAdvancedStateCreateInfo {
            src_premultiplied: false,
            dst_premultiplied: false,
            blend_overlap: Default::default(),
        }
    }
}

impl VkSetup for VkPipelineColorBlendAdvancedStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineColorBlendAdvancedStateCreateInfo {
    fn vk_free(&self) {
        
    }
}