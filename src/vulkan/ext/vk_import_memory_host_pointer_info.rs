// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkExternalMemoryHandleTypeFlags,RawVkExternalMemoryHandleTypeFlags};

/// Wrapper for [VkImportMemoryHostPointerInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImportMemoryHostPointerInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkImportMemoryHostPointerInfo {
    pub handle_type: VkExternalMemoryHandleTypeFlags,
    pub host_pointer: *mut c_void,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImportMemoryHostPointerInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub handle_type: RawVkExternalMemoryHandleTypeFlags,
    pub host_pointer: *mut c_void,
}

impl VkWrappedType<RawVkImportMemoryHostPointerInfo> for VkImportMemoryHostPointerInfo {
    fn vk_to_raw(src: &VkImportMemoryHostPointerInfo, dst: &mut RawVkImportMemoryHostPointerInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ImportMemoryHostPointerInfoExt);
        dst.next = ptr::null_mut();
        dst.handle_type = vk_to_raw_value(&src.handle_type);
        dst.host_pointer = src.host_pointer;
    }
}

impl VkRawType<VkImportMemoryHostPointerInfo> for RawVkImportMemoryHostPointerInfo {
    fn vk_to_wrapped(src: &RawVkImportMemoryHostPointerInfo) -> VkImportMemoryHostPointerInfo {
        VkImportMemoryHostPointerInfo {
            handle_type: RawVkExternalMemoryHandleTypeFlags::vk_to_wrapped(&src.handle_type),
            host_pointer: src.host_pointer,
        }
    }
}

impl Default for VkImportMemoryHostPointerInfo {
    fn default() -> VkImportMemoryHostPointerInfo {
        VkImportMemoryHostPointerInfo {
            handle_type: Default::default(),
            host_pointer: ptr::null_mut(),
        }
    }
}

impl VkSetup for VkImportMemoryHostPointerInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkImportMemoryHostPointerInfo {
    fn vk_free(&self) {
        
    }
}