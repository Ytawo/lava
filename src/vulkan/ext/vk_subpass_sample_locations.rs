// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::ext::{VkSampleLocationsInfo,RawVkSampleLocationsInfo};

/// Wrapper for [VkSubpassSampleLocationsEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSubpassSampleLocationsEXT.html).
#[derive(Debug, Clone)]
pub struct VkSubpassSampleLocations {
    pub subpass_index: usize,
    pub sample_locations_info: VkSampleLocationsInfo,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSubpassSampleLocations {
    pub subpass_index: u32,
    pub sample_locations_info: RawVkSampleLocationsInfo,
}

impl VkWrappedType<RawVkSubpassSampleLocations> for VkSubpassSampleLocations {
    fn vk_to_raw(src: &VkSubpassSampleLocations, dst: &mut RawVkSubpassSampleLocations) {
        dst.subpass_index = vk_to_raw_value(&src.subpass_index);
        dst.sample_locations_info = vk_to_raw_value(&src.sample_locations_info);
    }
}

impl VkRawType<VkSubpassSampleLocations> for RawVkSubpassSampleLocations {
    fn vk_to_wrapped(src: &RawVkSubpassSampleLocations) -> VkSubpassSampleLocations {
        VkSubpassSampleLocations {
            subpass_index: u32::vk_to_wrapped(&src.subpass_index),
            sample_locations_info: RawVkSampleLocationsInfo::vk_to_wrapped(&src.sample_locations_info),
        }
    }
}

impl Default for VkSubpassSampleLocations {
    fn default() -> VkSubpassSampleLocations {
        VkSubpassSampleLocations {
            subpass_index: 0,
            sample_locations_info: Default::default(),
        }
    }
}

impl VkSetup for VkSubpassSampleLocations {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.sample_locations_info, fn_table);
    }
}

impl VkFree for RawVkSubpassSampleLocations {
    fn vk_free(&self) {
        
    }
}