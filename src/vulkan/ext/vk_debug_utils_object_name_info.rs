// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkObjectType,RawVkObjectType};

/// Wrapper for [VkDebugUtilsObjectNameInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDebugUtilsObjectNameInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkDebugUtilsObjectNameInfo {
    pub object_type: VkObjectType,
    pub object_handle: usize,
    pub object_name: Option<String>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDebugUtilsObjectNameInfo {
    pub s_type: RawVkStructureType,
    pub next: *const c_void,
    pub object_type: RawVkObjectType,
    pub object_handle: u64,
    pub object_name: *const c_char,
}

impl VkWrappedType<RawVkDebugUtilsObjectNameInfo> for VkDebugUtilsObjectNameInfo {
    fn vk_to_raw(src: &VkDebugUtilsObjectNameInfo, dst: &mut RawVkDebugUtilsObjectNameInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DebugUtilsObjectNameInfoExt);
        dst.next = ptr::null();
        dst.object_type = vk_to_raw_value(&src.object_type);
        dst.object_handle = vk_to_raw_value(&src.object_handle);
        dst.object_name = new_ptr_string_checked(&src.object_name);
    }
}

impl VkRawType<VkDebugUtilsObjectNameInfo> for RawVkDebugUtilsObjectNameInfo {
    fn vk_to_wrapped(src: &RawVkDebugUtilsObjectNameInfo) -> VkDebugUtilsObjectNameInfo {
        VkDebugUtilsObjectNameInfo {
            object_type: RawVkObjectType::vk_to_wrapped(&src.object_type),
            object_handle: u64::vk_to_wrapped(&src.object_handle),
            object_name: new_string_checked(src.object_name),
        }
    }
}

impl Default for VkDebugUtilsObjectNameInfo {
    fn default() -> VkDebugUtilsObjectNameInfo {
        VkDebugUtilsObjectNameInfo {
            object_type: Default::default(),
            object_handle: 0,
            object_name: None,
        }
    }
}

impl VkSetup for VkDebugUtilsObjectNameInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDebugUtilsObjectNameInfo {
    fn vk_free(&self) {
        free_ptr(self.object_name);
    }
}