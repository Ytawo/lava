// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::ext::{VkTimeDomain,RawVkTimeDomain};

/// Wrapper for [VkCalibratedTimestampInfoEXT](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkCalibratedTimestampInfoEXT.html).
#[derive(Debug, Clone)]
pub struct VkCalibratedTimestampInfo {
    pub time_domain: VkTimeDomain,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkCalibratedTimestampInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub time_domain: RawVkTimeDomain,
}

impl VkWrappedType<RawVkCalibratedTimestampInfo> for VkCalibratedTimestampInfo {
    fn vk_to_raw(src: &VkCalibratedTimestampInfo, dst: &mut RawVkCalibratedTimestampInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::CalibratedTimestampInfoExt);
        dst.next = ptr::null_mut();
        dst.time_domain = vk_to_raw_value(&src.time_domain);
    }
}

impl VkRawType<VkCalibratedTimestampInfo> for RawVkCalibratedTimestampInfo {
    fn vk_to_wrapped(src: &RawVkCalibratedTimestampInfo) -> VkCalibratedTimestampInfo {
        VkCalibratedTimestampInfo {
            time_domain: RawVkTimeDomain::vk_to_wrapped(&src.time_domain),
        }
    }
}

impl Default for VkCalibratedTimestampInfo {
    fn default() -> VkCalibratedTimestampInfo {
        VkCalibratedTimestampInfo {
            time_domain: Default::default(),
        }
    }
}

impl VkSetup for VkCalibratedTimestampInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkCalibratedTimestampInfo {
    fn vk_free(&self) {
        
    }
}