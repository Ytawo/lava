// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::google::{VkPresentTime,RawVkPresentTime};

/// Wrapper for [VkPresentTimesInfoGOOGLE](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPresentTimesInfoGOOGLE.html).
#[derive(Debug, Clone)]
pub struct VkPresentTimesInfo {
    pub times: Option<Vec<VkPresentTime>>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPresentTimesInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub swapchain_count: u32,
    pub times: *mut RawVkPresentTime,
}

impl VkWrappedType<RawVkPresentTimesInfo> for VkPresentTimesInfo {
    fn vk_to_raw(src: &VkPresentTimesInfo, dst: &mut RawVkPresentTimesInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PresentTimesInfoGoogle);
        dst.next = ptr::null_mut();
        dst.swapchain_count = get_array_option_len(&src.times) as u32;
        dst.times = new_ptr_vk_array_checked(&src.times);
    }
}

impl VkRawType<VkPresentTimesInfo> for RawVkPresentTimesInfo {
    fn vk_to_wrapped(src: &RawVkPresentTimesInfo) -> VkPresentTimesInfo {
        VkPresentTimesInfo {
            times: new_vk_array_checked(src.swapchain_count, src.times),
        }
    }
}

impl Default for VkPresentTimesInfo {
    fn default() -> VkPresentTimesInfo {
        VkPresentTimesInfo {
            times: None,
        }
    }
}

impl VkSetup for VkPresentTimesInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPresentTimesInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.swapchain_count as usize, self.times);
    }
}