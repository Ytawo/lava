// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;

/// Wrapper for [VkPhysicalDeviceSparseProperties](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceSparseProperties.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    pub residency_standard_2_dblock_shape: bool,
    pub residency_standard_2_dmultisample_block_shape: bool,
    pub residency_standard_3_dblock_shape: bool,
    pub residency_aligned_mip_size: bool,
    pub residency_non_resident_strict: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceSparseProperties {
    pub residency_standard_2_dblock_shape: u32,
    pub residency_standard_2_dmultisample_block_shape: u32,
    pub residency_standard_3_dblock_shape: u32,
    pub residency_aligned_mip_size: u32,
    pub residency_non_resident_strict: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceSparseProperties> for VkPhysicalDeviceSparseProperties {
    fn vk_to_raw(src: &VkPhysicalDeviceSparseProperties, dst: &mut RawVkPhysicalDeviceSparseProperties) {
        dst.residency_standard_2_dblock_shape = vk_to_raw_value(&src.residency_standard_2_dblock_shape);
        dst.residency_standard_2_dmultisample_block_shape = vk_to_raw_value(&src.residency_standard_2_dmultisample_block_shape);
        dst.residency_standard_3_dblock_shape = vk_to_raw_value(&src.residency_standard_3_dblock_shape);
        dst.residency_aligned_mip_size = vk_to_raw_value(&src.residency_aligned_mip_size);
        dst.residency_non_resident_strict = vk_to_raw_value(&src.residency_non_resident_strict);
    }
}

impl VkRawType<VkPhysicalDeviceSparseProperties> for RawVkPhysicalDeviceSparseProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceSparseProperties) -> VkPhysicalDeviceSparseProperties {
        VkPhysicalDeviceSparseProperties {
            residency_standard_2_dblock_shape: u32::vk_to_wrapped(&src.residency_standard_2_dblock_shape),
            residency_standard_2_dmultisample_block_shape: u32::vk_to_wrapped(&src.residency_standard_2_dmultisample_block_shape),
            residency_standard_3_dblock_shape: u32::vk_to_wrapped(&src.residency_standard_3_dblock_shape),
            residency_aligned_mip_size: u32::vk_to_wrapped(&src.residency_aligned_mip_size),
            residency_non_resident_strict: u32::vk_to_wrapped(&src.residency_non_resident_strict),
        }
    }
}

impl Default for VkPhysicalDeviceSparseProperties {
    fn default() -> VkPhysicalDeviceSparseProperties {
        VkPhysicalDeviceSparseProperties {
            residency_standard_2_dblock_shape: false,
            residency_standard_2_dmultisample_block_shape: false,
            residency_standard_3_dblock_shape: false,
            residency_aligned_mip_size: false,
            residency_non_resident_strict: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceSparseProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceSparseProperties {
    fn vk_free(&self) {
        
    }
}