// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkSemaphore,RawVkSemaphore};
use vulkan::vk::{VkPipelineStageFlags,RawVkPipelineStageFlags};
use vulkan::vk::{VkCommandBuffer,RawVkCommandBuffer};

/// Wrapper for [VkSubmitInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSubmitInfo.html).
#[derive(Debug, Clone)]
pub struct VkSubmitInfo {
    pub wait_semaphores: Vec<VkSemaphore>,
    pub wait_dst_stage_mask: Vec<VkPipelineStageFlags>,
    pub command_buffers: Vec<VkCommandBuffer>,
    pub signal_semaphores: Vec<VkSemaphore>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSubmitInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub wait_semaphore_count: u32,
    pub wait_semaphores: *mut RawVkSemaphore,
    pub wait_dst_stage_mask: *mut RawVkPipelineStageFlags,
    pub command_buffer_count: u32,
    pub command_buffers: *mut RawVkCommandBuffer,
    pub signal_semaphore_count: u32,
    pub signal_semaphores: *mut RawVkSemaphore,
}

impl VkWrappedType<RawVkSubmitInfo> for VkSubmitInfo {
    fn vk_to_raw(src: &VkSubmitInfo, dst: &mut RawVkSubmitInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SubmitInfo);
        dst.next = ptr::null_mut();
        dst.wait_semaphore_count = cmp::max(src.wait_semaphores.len(), src.wait_dst_stage_mask.len()) as u32;
        dst.wait_semaphores = new_ptr_vk_array(&src.wait_semaphores);
        dst.wait_dst_stage_mask = new_ptr_vk_array(&src.wait_dst_stage_mask);
        dst.command_buffer_count = src.command_buffers.len() as u32;
        dst.command_buffers = new_ptr_vk_array(&src.command_buffers);
        dst.signal_semaphore_count = src.signal_semaphores.len() as u32;
        dst.signal_semaphores = new_ptr_vk_array(&src.signal_semaphores);
    }
}

impl VkRawType<VkSubmitInfo> for RawVkSubmitInfo {
    fn vk_to_wrapped(src: &RawVkSubmitInfo) -> VkSubmitInfo {
        VkSubmitInfo {
            wait_semaphores: new_vk_array(src.wait_semaphore_count, src.wait_semaphores),
            wait_dst_stage_mask: new_vk_array(src.wait_semaphore_count, src.wait_dst_stage_mask),
            command_buffers: new_vk_array(src.command_buffer_count, src.command_buffers),
            signal_semaphores: new_vk_array(src.signal_semaphore_count, src.signal_semaphores),
        }
    }
}

impl Default for VkSubmitInfo {
    fn default() -> VkSubmitInfo {
        VkSubmitInfo {
            wait_semaphores: Vec::new(),
            wait_dst_stage_mask: Vec::new(),
            command_buffers: Vec::new(),
            signal_semaphores: Vec::new(),
        }
    }
}

impl VkSetup for VkSubmitInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkSubmitInfo {
    fn vk_free(&self) {
        free_ptr(self.wait_semaphores);
        free_ptr(self.wait_dst_stage_mask);
        free_ptr(self.command_buffers);
        free_ptr(self.signal_semaphores);
    }
}