// Generated by `scripts/generate.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vulkan::*;
use vulkan::vk::*;

#[doc(hidden)]
pub type RawVkShaderModule = u64;

/// Wrapper for [VkShaderModule](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkShaderModule.html).
#[derive(Debug, Clone, Copy)]
pub struct VkShaderModule {
    _handle: RawVkShaderModule,
    _fn_table: *mut VkFunctionTable
}

impl VkRawType<VkShaderModule> for RawVkShaderModule {
    fn vk_to_wrapped(src: &RawVkShaderModule) -> VkShaderModule {
        VkShaderModule {
            _handle: *src,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkShaderModule> for VkShaderModule {
    fn vk_to_raw(src: &VkShaderModule, dst: &mut RawVkShaderModule) {
        *dst = src._handle
    }
}

impl Default for VkShaderModule {
    fn default() -> VkShaderModule {
        VkShaderModule {
            _handle: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkShaderModule {
    fn eq(&self, other: &VkShaderModule) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkShaderModule {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        self._fn_table = fn_table;
    }
}

impl VkShaderModule {
    
    /// Returns the internal Vulkan handle for the object.
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
    
    /// Wrapper for [vkDestroyShaderModule](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkDestroyShaderModule.html).
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroyShaderModule)((*self._fn_table).device, self._handle, ptr::null());
        }
    }
}