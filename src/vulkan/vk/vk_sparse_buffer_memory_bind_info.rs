// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkBuffer,RawVkBuffer};
use vulkan::vk::{VkSparseMemoryBind,RawVkSparseMemoryBind};

/// Wrapper for [VkSparseBufferMemoryBindInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSparseBufferMemoryBindInfo.html).
#[derive(Debug, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    pub buffer: VkBuffer,
    pub binds: Vec<VkSparseMemoryBind>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSparseBufferMemoryBindInfo {
    pub buffer: RawVkBuffer,
    pub bind_count: u32,
    pub binds: *mut RawVkSparseMemoryBind,
}

impl VkWrappedType<RawVkSparseBufferMemoryBindInfo> for VkSparseBufferMemoryBindInfo {
    fn vk_to_raw(src: &VkSparseBufferMemoryBindInfo, dst: &mut RawVkSparseBufferMemoryBindInfo) {
        dst.buffer = vk_to_raw_value(&src.buffer);
        dst.bind_count = src.binds.len() as u32;
        dst.binds = new_ptr_vk_array(&src.binds);
    }
}

impl VkRawType<VkSparseBufferMemoryBindInfo> for RawVkSparseBufferMemoryBindInfo {
    fn vk_to_wrapped(src: &RawVkSparseBufferMemoryBindInfo) -> VkSparseBufferMemoryBindInfo {
        VkSparseBufferMemoryBindInfo {
            buffer: RawVkBuffer::vk_to_wrapped(&src.buffer),
            binds: new_vk_array(src.bind_count, src.binds),
        }
    }
}

impl Default for VkSparseBufferMemoryBindInfo {
    fn default() -> VkSparseBufferMemoryBindInfo {
        VkSparseBufferMemoryBindInfo {
            buffer: Default::default(),
            binds: Vec::new(),
        }
    }
}

impl VkSetup for VkSparseBufferMemoryBindInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.buffer, fn_table);
    }
}

impl VkFree for RawVkSparseBufferMemoryBindInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.bind_count as usize, self.binds);
    }
}