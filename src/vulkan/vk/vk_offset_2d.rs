// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;

/// Wrapper for [VkOffset2D](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkOffset2D.html).
#[derive(Debug, Clone)]
pub struct VkOffset2D {
    pub x: i32,
    pub y: i32,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkOffset2D {
    pub x: i32,
    pub y: i32,
}

impl VkWrappedType<RawVkOffset2D> for VkOffset2D {
    fn vk_to_raw(src: &VkOffset2D, dst: &mut RawVkOffset2D) {
        dst.x = src.x;
        dst.y = src.y;
    }
}

impl VkRawType<VkOffset2D> for RawVkOffset2D {
    fn vk_to_wrapped(src: &RawVkOffset2D) -> VkOffset2D {
        VkOffset2D {
            x: src.x,
            y: src.y,
        }
    }
}

impl Default for VkOffset2D {
    fn default() -> VkOffset2D {
        VkOffset2D {
            x: 0,
            y: 0,
        }
    }
}

impl VkSetup for VkOffset2D {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkOffset2D {
    fn vk_free(&self) {
        
    }
}