// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;

/// Wrapper for [VkMemoryRequirements](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkMemoryRequirements.html).
#[derive(Debug, Clone)]
pub struct VkMemoryRequirements {
    pub size: usize,
    pub alignment: usize,
    pub memory_type_bits: u32,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkMemoryRequirements {
    pub size: u64,
    pub alignment: u64,
    pub memory_type_bits: u32,
}

impl VkWrappedType<RawVkMemoryRequirements> for VkMemoryRequirements {
    fn vk_to_raw(src: &VkMemoryRequirements, dst: &mut RawVkMemoryRequirements) {
        dst.size = vk_to_raw_value(&src.size);
        dst.alignment = vk_to_raw_value(&src.alignment);
        dst.memory_type_bits = src.memory_type_bits;
    }
}

impl VkRawType<VkMemoryRequirements> for RawVkMemoryRequirements {
    fn vk_to_wrapped(src: &RawVkMemoryRequirements) -> VkMemoryRequirements {
        VkMemoryRequirements {
            size: u64::vk_to_wrapped(&src.size),
            alignment: u64::vk_to_wrapped(&src.alignment),
            memory_type_bits: src.memory_type_bits,
        }
    }
}

impl Default for VkMemoryRequirements {
    fn default() -> VkMemoryRequirements {
        VkMemoryRequirements {
            size: 0,
            alignment: 0,
            memory_type_bits: 0,
        }
    }
}

impl VkSetup for VkMemoryRequirements {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkMemoryRequirements {
    fn vk_free(&self) {
        
    }
}