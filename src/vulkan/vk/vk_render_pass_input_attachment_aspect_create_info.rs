// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkInputAttachmentAspectReference,RawVkInputAttachmentAspectReference};

/// Wrapper for [VkRenderPassInputAttachmentAspectCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfo.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    pub aspect_references: Vec<VkInputAttachmentAspectReference>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassInputAttachmentAspectCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub aspect_reference_count: u32,
    pub aspect_references: *mut RawVkInputAttachmentAspectReference,
}

impl VkWrappedType<RawVkRenderPassInputAttachmentAspectCreateInfo> for VkRenderPassInputAttachmentAspectCreateInfo {
    fn vk_to_raw(src: &VkRenderPassInputAttachmentAspectCreateInfo, dst: &mut RawVkRenderPassInputAttachmentAspectCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassInputAttachmentAspectCreateInfo);
        dst.next = ptr::null_mut();
        dst.aspect_reference_count = src.aspect_references.len() as u32;
        dst.aspect_references = new_ptr_vk_array(&src.aspect_references);
    }
}

impl VkRawType<VkRenderPassInputAttachmentAspectCreateInfo> for RawVkRenderPassInputAttachmentAspectCreateInfo {
    fn vk_to_wrapped(src: &RawVkRenderPassInputAttachmentAspectCreateInfo) -> VkRenderPassInputAttachmentAspectCreateInfo {
        VkRenderPassInputAttachmentAspectCreateInfo {
            aspect_references: new_vk_array(src.aspect_reference_count, src.aspect_references),
        }
    }
}

impl Default for VkRenderPassInputAttachmentAspectCreateInfo {
    fn default() -> VkRenderPassInputAttachmentAspectCreateInfo {
        VkRenderPassInputAttachmentAspectCreateInfo {
            aspect_references: Vec::new(),
        }
    }
}

impl VkSetup for VkRenderPassInputAttachmentAspectCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkRenderPassInputAttachmentAspectCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.aspect_reference_count as usize, self.aspect_references);
    }
}