// Generated by `scripts/generate.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vulkan::*;
use vulkan::vk::*;

#[doc(hidden)]
pub type RawVkDescriptorPool = u64;

/// Wrapper for [VkDescriptorPool](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorPool.html).
#[derive(Debug, Clone, Copy)]
pub struct VkDescriptorPool {
    _handle: RawVkDescriptorPool,
    _fn_table: *mut VkFunctionTable
}

impl VkRawType<VkDescriptorPool> for RawVkDescriptorPool {
    fn vk_to_wrapped(src: &RawVkDescriptorPool) -> VkDescriptorPool {
        VkDescriptorPool {
            _handle: *src,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkDescriptorPool> for VkDescriptorPool {
    fn vk_to_raw(src: &VkDescriptorPool, dst: &mut RawVkDescriptorPool) {
        *dst = src._handle
    }
}

impl Default for VkDescriptorPool {
    fn default() -> VkDescriptorPool {
        VkDescriptorPool {
            _handle: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkDescriptorPool {
    fn eq(&self, other: &VkDescriptorPool) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkDescriptorPool {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        self._fn_table = fn_table;
    }
}

impl VkDescriptorPool {
    
    /// Returns the internal Vulkan handle for the object.
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
}