// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkCommandBufferUsageFlags,RawVkCommandBufferUsageFlags};
use vulkan::vk::{VkCommandBufferInheritanceInfo,RawVkCommandBufferInheritanceInfo};

/// Wrapper for [VkCommandBufferBeginInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkCommandBufferBeginInfo.html).
#[derive(Debug, Clone)]
pub struct VkCommandBufferBeginInfo {
    pub flags: VkCommandBufferUsageFlags,
    pub inheritance_info: Option<VkCommandBufferInheritanceInfo>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkCommandBufferBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkCommandBufferUsageFlags,
    pub inheritance_info: *mut RawVkCommandBufferInheritanceInfo,
}

impl VkWrappedType<RawVkCommandBufferBeginInfo> for VkCommandBufferBeginInfo {
    fn vk_to_raw(src: &VkCommandBufferBeginInfo, dst: &mut RawVkCommandBufferBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::CommandBufferBeginInfo);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.inheritance_info = new_ptr_vk_value_checked(&src.inheritance_info);
    }
}

impl VkRawType<VkCommandBufferBeginInfo> for RawVkCommandBufferBeginInfo {
    fn vk_to_wrapped(src: &RawVkCommandBufferBeginInfo) -> VkCommandBufferBeginInfo {
        VkCommandBufferBeginInfo {
            flags: RawVkCommandBufferUsageFlags::vk_to_wrapped(&src.flags),
            inheritance_info: new_vk_value_checked(src.inheritance_info),
        }
    }
}

impl Default for VkCommandBufferBeginInfo {
    fn default() -> VkCommandBufferBeginInfo {
        VkCommandBufferBeginInfo {
            flags: Default::default(),
            inheritance_info: None,
        }
    }
}

impl VkSetup for VkCommandBufferBeginInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkCommandBufferBeginInfo {
    fn vk_free(&self) {
        free_vk_ptr(self.inheritance_info);
    }
}