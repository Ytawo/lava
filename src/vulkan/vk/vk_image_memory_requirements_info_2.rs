// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkImage,RawVkImage};

/// Wrapper for [VkImageMemoryRequirementsInfo2](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImageMemoryRequirementsInfo2.html).
#[derive(Debug, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    pub image: VkImage,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImageMemoryRequirementsInfo2 {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub image: RawVkImage,
}

impl VkWrappedType<RawVkImageMemoryRequirementsInfo2> for VkImageMemoryRequirementsInfo2 {
    fn vk_to_raw(src: &VkImageMemoryRequirementsInfo2, dst: &mut RawVkImageMemoryRequirementsInfo2) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ImageMemoryRequirementsInfo2);
        dst.next = ptr::null_mut();
        dst.image = vk_to_raw_value(&src.image);
    }
}

impl VkRawType<VkImageMemoryRequirementsInfo2> for RawVkImageMemoryRequirementsInfo2 {
    fn vk_to_wrapped(src: &RawVkImageMemoryRequirementsInfo2) -> VkImageMemoryRequirementsInfo2 {
        VkImageMemoryRequirementsInfo2 {
            image: RawVkImage::vk_to_wrapped(&src.image),
        }
    }
}

impl Default for VkImageMemoryRequirementsInfo2 {
    fn default() -> VkImageMemoryRequirementsInfo2 {
        VkImageMemoryRequirementsInfo2 {
            image: Default::default(),
        }
    }
}

impl VkSetup for VkImageMemoryRequirementsInfo2 {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.image, fn_table);
    }
}

impl VkFree for RawVkImageMemoryRequirementsInfo2 {
    fn vk_free(&self) {
        
    }
}