// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkSamplerYcbcrConversion,RawVkSamplerYcbcrConversion};

/// Wrapper for [VkSamplerYcbcrConversionInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSamplerYcbcrConversionInfo.html).
#[derive(Debug, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    pub conversion: VkSamplerYcbcrConversion,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSamplerYcbcrConversionInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub conversion: RawVkSamplerYcbcrConversion,
}

impl VkWrappedType<RawVkSamplerYcbcrConversionInfo> for VkSamplerYcbcrConversionInfo {
    fn vk_to_raw(src: &VkSamplerYcbcrConversionInfo, dst: &mut RawVkSamplerYcbcrConversionInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::SamplerYcbcrConversionInfo);
        dst.next = ptr::null_mut();
        dst.conversion = vk_to_raw_value(&src.conversion);
    }
}

impl VkRawType<VkSamplerYcbcrConversionInfo> for RawVkSamplerYcbcrConversionInfo {
    fn vk_to_wrapped(src: &RawVkSamplerYcbcrConversionInfo) -> VkSamplerYcbcrConversionInfo {
        VkSamplerYcbcrConversionInfo {
            conversion: RawVkSamplerYcbcrConversion::vk_to_wrapped(&src.conversion),
        }
    }
}

impl Default for VkSamplerYcbcrConversionInfo {
    fn default() -> VkSamplerYcbcrConversionInfo {
        VkSamplerYcbcrConversionInfo {
            conversion: Default::default(),
        }
    }
}

impl VkSetup for VkSamplerYcbcrConversionInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.conversion, fn_table);
    }
}

impl VkFree for RawVkSamplerYcbcrConversionInfo {
    fn vk_free(&self) {
        
    }
}