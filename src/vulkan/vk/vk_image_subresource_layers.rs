// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkImageAspectFlags,RawVkImageAspectFlags};

/// Wrapper for [VkImageSubresourceLayers](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImageSubresourceLayers.html).
#[derive(Debug, Clone)]
pub struct VkImageSubresourceLayers {
    pub aspect_mask: VkImageAspectFlags,
    pub mip_level: usize,
    pub base_array_layer: usize,
    pub layer_count: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImageSubresourceLayers {
    pub aspect_mask: RawVkImageAspectFlags,
    pub mip_level: u32,
    pub base_array_layer: u32,
    pub layer_count: u32,
}

impl VkWrappedType<RawVkImageSubresourceLayers> for VkImageSubresourceLayers {
    fn vk_to_raw(src: &VkImageSubresourceLayers, dst: &mut RawVkImageSubresourceLayers) {
        dst.aspect_mask = vk_to_raw_value(&src.aspect_mask);
        dst.mip_level = vk_to_raw_value(&src.mip_level);
        dst.base_array_layer = vk_to_raw_value(&src.base_array_layer);
        dst.layer_count = vk_to_raw_value(&src.layer_count);
    }
}

impl VkRawType<VkImageSubresourceLayers> for RawVkImageSubresourceLayers {
    fn vk_to_wrapped(src: &RawVkImageSubresourceLayers) -> VkImageSubresourceLayers {
        VkImageSubresourceLayers {
            aspect_mask: RawVkImageAspectFlags::vk_to_wrapped(&src.aspect_mask),
            mip_level: u32::vk_to_wrapped(&src.mip_level),
            base_array_layer: u32::vk_to_wrapped(&src.base_array_layer),
            layer_count: u32::vk_to_wrapped(&src.layer_count),
        }
    }
}

impl Default for VkImageSubresourceLayers {
    fn default() -> VkImageSubresourceLayers {
        VkImageSubresourceLayers {
            aspect_mask: Default::default(),
            mip_level: 0,
            base_array_layer: 0,
            layer_count: 0,
        }
    }
}

impl VkSetup for VkImageSubresourceLayers {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkImageSubresourceLayers {
    fn vk_free(&self) {
        
    }
}