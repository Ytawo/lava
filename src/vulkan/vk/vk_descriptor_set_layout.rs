// Generated by `scripts/generate.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vulkan::*;
use vulkan::vk::*;

#[doc(hidden)]
pub type RawVkDescriptorSetLayout = u64;

/// Wrapper for [VkDescriptorSetLayout](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorSetLayout.html).
#[derive(Debug, Clone, Copy)]
pub struct VkDescriptorSetLayout {
    _handle: RawVkDescriptorSetLayout,
    _fn_table: *mut VkFunctionTable
}

impl VkRawType<VkDescriptorSetLayout> for RawVkDescriptorSetLayout {
    fn vk_to_wrapped(src: &RawVkDescriptorSetLayout) -> VkDescriptorSetLayout {
        VkDescriptorSetLayout {
            _handle: *src,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkDescriptorSetLayout> for VkDescriptorSetLayout {
    fn vk_to_raw(src: &VkDescriptorSetLayout, dst: &mut RawVkDescriptorSetLayout) {
        *dst = src._handle
    }
}

impl Default for VkDescriptorSetLayout {
    fn default() -> VkDescriptorSetLayout {
        VkDescriptorSetLayout {
            _handle: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkDescriptorSetLayout {
    fn eq(&self, other: &VkDescriptorSetLayout) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkDescriptorSetLayout {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        self._fn_table = fn_table;
    }
}

impl VkDescriptorSetLayout {
    
    /// Returns the internal Vulkan handle for the object.
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
    
    /// Wrapper for [vkDestroyDescriptorSetLayout](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkDestroyDescriptorSetLayout.html).
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroyDescriptorSetLayout)((*self._fn_table).device, self._handle, ptr::null());
        }
    }
}