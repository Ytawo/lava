// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkDescriptorSetLayoutCreateFlags,RawVkDescriptorSetLayoutCreateFlags};
use vulkan::vk::{VkDescriptorSetLayoutBinding,RawVkDescriptorSetLayoutBinding};

/// Wrapper for [VkDescriptorSetLayoutCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html).
#[derive(Debug, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindings: Vec<VkDescriptorSetLayoutBinding>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDescriptorSetLayoutCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkDescriptorSetLayoutCreateFlags,
    pub binding_count: u32,
    pub bindings: *mut RawVkDescriptorSetLayoutBinding,
}

impl VkWrappedType<RawVkDescriptorSetLayoutCreateInfo> for VkDescriptorSetLayoutCreateInfo {
    fn vk_to_raw(src: &VkDescriptorSetLayoutCreateInfo, dst: &mut RawVkDescriptorSetLayoutCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DescriptorSetLayoutCreateInfo);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.binding_count = src.bindings.len() as u32;
        dst.bindings = new_ptr_vk_array(&src.bindings);
    }
}

impl VkRawType<VkDescriptorSetLayoutCreateInfo> for RawVkDescriptorSetLayoutCreateInfo {
    fn vk_to_wrapped(src: &RawVkDescriptorSetLayoutCreateInfo) -> VkDescriptorSetLayoutCreateInfo {
        VkDescriptorSetLayoutCreateInfo {
            flags: RawVkDescriptorSetLayoutCreateFlags::vk_to_wrapped(&src.flags),
            bindings: new_vk_array(src.binding_count, src.bindings),
        }
    }
}

impl Default for VkDescriptorSetLayoutCreateInfo {
    fn default() -> VkDescriptorSetLayoutCreateInfo {
        VkDescriptorSetLayoutCreateInfo {
            flags: Default::default(),
            bindings: Vec::new(),
        }
    }
}

impl VkSetup for VkDescriptorSetLayoutCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDescriptorSetLayoutCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.binding_count as usize, self.bindings);
    }
}