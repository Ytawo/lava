// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkQueueFamilyProperties,RawVkQueueFamilyProperties};

/// Wrapper for [VkQueueFamilyProperties2](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkQueueFamilyProperties2.html).
#[derive(Debug, Clone)]
pub struct VkQueueFamilyProperties2 {
    pub queue_family_properties: VkQueueFamilyProperties,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkQueueFamilyProperties2 {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub queue_family_properties: RawVkQueueFamilyProperties,
}

impl VkWrappedType<RawVkQueueFamilyProperties2> for VkQueueFamilyProperties2 {
    fn vk_to_raw(src: &VkQueueFamilyProperties2, dst: &mut RawVkQueueFamilyProperties2) {
        dst.s_type = vk_to_raw_value(&VkStructureType::QueueFamilyProperties2);
        dst.next = ptr::null_mut();
        dst.queue_family_properties = vk_to_raw_value(&src.queue_family_properties);
    }
}

impl VkRawType<VkQueueFamilyProperties2> for RawVkQueueFamilyProperties2 {
    fn vk_to_wrapped(src: &RawVkQueueFamilyProperties2) -> VkQueueFamilyProperties2 {
        VkQueueFamilyProperties2 {
            queue_family_properties: RawVkQueueFamilyProperties::vk_to_wrapped(&src.queue_family_properties),
        }
    }
}

impl Default for VkQueueFamilyProperties2 {
    fn default() -> VkQueueFamilyProperties2 {
        VkQueueFamilyProperties2 {
            queue_family_properties: Default::default(),
        }
    }
}

impl VkSetup for VkQueueFamilyProperties2 {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.queue_family_properties, fn_table);
    }
}

impl VkFree for RawVkQueueFamilyProperties2 {
    fn vk_free(&self) {
        
    }
}