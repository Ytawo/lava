// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkRenderPassCreateFlags,RawVkRenderPassCreateFlags};
use vulkan::vk::{VkAttachmentDescription,RawVkAttachmentDescription};
use vulkan::vk::{VkSubpassDescription,RawVkSubpassDescription};
use vulkan::vk::{VkSubpassDependency,RawVkSubpassDependency};

/// Wrapper for [VkRenderPassCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRenderPassCreateInfo.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassCreateInfo {
    pub flags: VkRenderPassCreateFlags,
    pub attachments: Vec<VkAttachmentDescription>,
    pub subpasses: Vec<VkSubpassDescription>,
    pub dependencies: Vec<VkSubpassDependency>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkRenderPassCreateFlags,
    pub attachment_count: u32,
    pub attachments: *mut RawVkAttachmentDescription,
    pub subpass_count: u32,
    pub subpasses: *mut RawVkSubpassDescription,
    pub dependency_count: u32,
    pub dependencies: *mut RawVkSubpassDependency,
}

impl VkWrappedType<RawVkRenderPassCreateInfo> for VkRenderPassCreateInfo {
    fn vk_to_raw(src: &VkRenderPassCreateInfo, dst: &mut RawVkRenderPassCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassCreateInfo);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.attachment_count = src.attachments.len() as u32;
        dst.attachments = new_ptr_vk_array(&src.attachments);
        dst.subpass_count = src.subpasses.len() as u32;
        dst.subpasses = new_ptr_vk_array(&src.subpasses);
        dst.dependency_count = src.dependencies.len() as u32;
        dst.dependencies = new_ptr_vk_array(&src.dependencies);
    }
}

impl VkRawType<VkRenderPassCreateInfo> for RawVkRenderPassCreateInfo {
    fn vk_to_wrapped(src: &RawVkRenderPassCreateInfo) -> VkRenderPassCreateInfo {
        VkRenderPassCreateInfo {
            flags: RawVkRenderPassCreateFlags::vk_to_wrapped(&src.flags),
            attachments: new_vk_array(src.attachment_count, src.attachments),
            subpasses: new_vk_array(src.subpass_count, src.subpasses),
            dependencies: new_vk_array(src.dependency_count, src.dependencies),
        }
    }
}

impl Default for VkRenderPassCreateInfo {
    fn default() -> VkRenderPassCreateInfo {
        VkRenderPassCreateInfo {
            flags: Default::default(),
            attachments: Vec::new(),
            subpasses: Vec::new(),
            dependencies: Vec::new(),
        }
    }
}

impl VkSetup for VkRenderPassCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkRenderPassCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.attachment_count as usize, self.attachments);
        free_vk_ptr_array(self.subpass_count as usize, self.subpasses);
        free_vk_ptr_array(self.dependency_count as usize, self.dependencies);
    }
}