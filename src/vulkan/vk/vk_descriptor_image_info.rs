// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkSampler,RawVkSampler};
use vulkan::vk::{VkImageView,RawVkImageView};
use vulkan::vk::{VkImageLayout,RawVkImageLayout};

/// Wrapper for [VkDescriptorImageInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorImageInfo.html).
#[derive(Debug, Clone)]
pub struct VkDescriptorImageInfo {
    pub sampler: VkSampler,
    pub image_view: VkImageView,
    pub image_layout: VkImageLayout,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDescriptorImageInfo {
    pub sampler: RawVkSampler,
    pub image_view: RawVkImageView,
    pub image_layout: RawVkImageLayout,
}

impl VkWrappedType<RawVkDescriptorImageInfo> for VkDescriptorImageInfo {
    fn vk_to_raw(src: &VkDescriptorImageInfo, dst: &mut RawVkDescriptorImageInfo) {
        dst.sampler = vk_to_raw_value(&src.sampler);
        dst.image_view = vk_to_raw_value(&src.image_view);
        dst.image_layout = vk_to_raw_value(&src.image_layout);
    }
}

impl VkRawType<VkDescriptorImageInfo> for RawVkDescriptorImageInfo {
    fn vk_to_wrapped(src: &RawVkDescriptorImageInfo) -> VkDescriptorImageInfo {
        VkDescriptorImageInfo {
            sampler: RawVkSampler::vk_to_wrapped(&src.sampler),
            image_view: RawVkImageView::vk_to_wrapped(&src.image_view),
            image_layout: RawVkImageLayout::vk_to_wrapped(&src.image_layout),
        }
    }
}

impl Default for VkDescriptorImageInfo {
    fn default() -> VkDescriptorImageInfo {
        VkDescriptorImageInfo {
            sampler: Default::default(),
            image_view: Default::default(),
            image_layout: Default::default(),
        }
    }
}

impl VkSetup for VkDescriptorImageInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.sampler, fn_table);
        VkSetup::vk_setup(&mut self.image_view, fn_table);
    }
}

impl VkFree for RawVkDescriptorImageInfo {
    fn vk_free(&self) {
        
    }
}