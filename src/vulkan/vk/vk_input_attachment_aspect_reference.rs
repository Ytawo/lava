// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkImageAspectFlags,RawVkImageAspectFlags};

/// Wrapper for [VkInputAttachmentAspectReference](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkInputAttachmentAspectReference.html).
#[derive(Debug, Clone)]
pub struct VkInputAttachmentAspectReference {
    pub subpass: usize,
    pub input_attachment_index: usize,
    pub aspect_mask: VkImageAspectFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkInputAttachmentAspectReference {
    pub subpass: u32,
    pub input_attachment_index: u32,
    pub aspect_mask: RawVkImageAspectFlags,
}

impl VkWrappedType<RawVkInputAttachmentAspectReference> for VkInputAttachmentAspectReference {
    fn vk_to_raw(src: &VkInputAttachmentAspectReference, dst: &mut RawVkInputAttachmentAspectReference) {
        dst.subpass = vk_to_raw_value(&src.subpass);
        dst.input_attachment_index = vk_to_raw_value(&src.input_attachment_index);
        dst.aspect_mask = vk_to_raw_value(&src.aspect_mask);
    }
}

impl VkRawType<VkInputAttachmentAspectReference> for RawVkInputAttachmentAspectReference {
    fn vk_to_wrapped(src: &RawVkInputAttachmentAspectReference) -> VkInputAttachmentAspectReference {
        VkInputAttachmentAspectReference {
            subpass: u32::vk_to_wrapped(&src.subpass),
            input_attachment_index: u32::vk_to_wrapped(&src.input_attachment_index),
            aspect_mask: RawVkImageAspectFlags::vk_to_wrapped(&src.aspect_mask),
        }
    }
}

impl Default for VkInputAttachmentAspectReference {
    fn default() -> VkInputAttachmentAspectReference {
        VkInputAttachmentAspectReference {
            subpass: 0,
            input_attachment_index: 0,
            aspect_mask: Default::default(),
        }
    }
}

impl VkSetup for VkInputAttachmentAspectReference {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkInputAttachmentAspectReference {
    fn vk_free(&self) {
        
    }
}