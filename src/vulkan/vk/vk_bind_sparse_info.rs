// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkSemaphore,RawVkSemaphore};
use vulkan::vk::{VkSparseBufferMemoryBindInfo,RawVkSparseBufferMemoryBindInfo};
use vulkan::vk::{VkSparseImageOpaqueMemoryBindInfo,RawVkSparseImageOpaqueMemoryBindInfo};
use vulkan::vk::{VkSparseImageMemoryBindInfo,RawVkSparseImageMemoryBindInfo};

/// Wrapper for [VkBindSparseInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkBindSparseInfo.html).
#[derive(Debug, Clone)]
pub struct VkBindSparseInfo {
    pub wait_semaphores: Vec<VkSemaphore>,
    pub buffer_binds: Vec<VkSparseBufferMemoryBindInfo>,
    pub image_opaque_binds: Vec<VkSparseImageOpaqueMemoryBindInfo>,
    pub image_binds: Vec<VkSparseImageMemoryBindInfo>,
    pub signal_semaphores: Vec<VkSemaphore>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBindSparseInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub wait_semaphore_count: u32,
    pub wait_semaphores: *mut RawVkSemaphore,
    pub buffer_bind_count: u32,
    pub buffer_binds: *mut RawVkSparseBufferMemoryBindInfo,
    pub image_opaque_bind_count: u32,
    pub image_opaque_binds: *mut RawVkSparseImageOpaqueMemoryBindInfo,
    pub image_bind_count: u32,
    pub image_binds: *mut RawVkSparseImageMemoryBindInfo,
    pub signal_semaphore_count: u32,
    pub signal_semaphores: *mut RawVkSemaphore,
}

impl VkWrappedType<RawVkBindSparseInfo> for VkBindSparseInfo {
    fn vk_to_raw(src: &VkBindSparseInfo, dst: &mut RawVkBindSparseInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BindSparseInfo);
        dst.next = ptr::null_mut();
        dst.wait_semaphore_count = src.wait_semaphores.len() as u32;
        dst.wait_semaphores = new_ptr_vk_array(&src.wait_semaphores);
        dst.buffer_bind_count = src.buffer_binds.len() as u32;
        dst.buffer_binds = new_ptr_vk_array(&src.buffer_binds);
        dst.image_opaque_bind_count = src.image_opaque_binds.len() as u32;
        dst.image_opaque_binds = new_ptr_vk_array(&src.image_opaque_binds);
        dst.image_bind_count = src.image_binds.len() as u32;
        dst.image_binds = new_ptr_vk_array(&src.image_binds);
        dst.signal_semaphore_count = src.signal_semaphores.len() as u32;
        dst.signal_semaphores = new_ptr_vk_array(&src.signal_semaphores);
    }
}

impl VkRawType<VkBindSparseInfo> for RawVkBindSparseInfo {
    fn vk_to_wrapped(src: &RawVkBindSparseInfo) -> VkBindSparseInfo {
        VkBindSparseInfo {
            wait_semaphores: new_vk_array(src.wait_semaphore_count, src.wait_semaphores),
            buffer_binds: new_vk_array(src.buffer_bind_count, src.buffer_binds),
            image_opaque_binds: new_vk_array(src.image_opaque_bind_count, src.image_opaque_binds),
            image_binds: new_vk_array(src.image_bind_count, src.image_binds),
            signal_semaphores: new_vk_array(src.signal_semaphore_count, src.signal_semaphores),
        }
    }
}

impl Default for VkBindSparseInfo {
    fn default() -> VkBindSparseInfo {
        VkBindSparseInfo {
            wait_semaphores: Vec::new(),
            buffer_binds: Vec::new(),
            image_opaque_binds: Vec::new(),
            image_binds: Vec::new(),
            signal_semaphores: Vec::new(),
        }
    }
}

impl VkSetup for VkBindSparseInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkBindSparseInfo {
    fn vk_free(&self) {
        free_ptr(self.wait_semaphores);
        free_vk_ptr_array(self.buffer_bind_count as usize, self.buffer_binds);
        free_vk_ptr_array(self.image_opaque_bind_count as usize, self.image_opaque_binds);
        free_vk_ptr_array(self.image_bind_count as usize, self.image_binds);
        free_ptr(self.signal_semaphores);
    }
}