// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkDeviceMemory,RawVkDeviceMemory};
use vulkan::vk::{VkSparseMemoryBindFlags,RawVkSparseMemoryBindFlags};

/// Wrapper for [VkSparseMemoryBind](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSparseMemoryBind.html).
#[derive(Debug, Clone)]
pub struct VkSparseMemoryBind {
    pub resource_offset: usize,
    pub size: usize,
    pub memory: Option<VkDeviceMemory>,
    pub memory_offset: usize,
    pub flags: VkSparseMemoryBindFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSparseMemoryBind {
    pub resource_offset: u64,
    pub size: u64,
    pub memory: RawVkDeviceMemory,
    pub memory_offset: u64,
    pub flags: RawVkSparseMemoryBindFlags,
}

impl VkWrappedType<RawVkSparseMemoryBind> for VkSparseMemoryBind {
    fn vk_to_raw(src: &VkSparseMemoryBind, dst: &mut RawVkSparseMemoryBind) {
        dst.resource_offset = vk_to_raw_value(&src.resource_offset);
        dst.size = vk_to_raw_value(&src.size);
        dst.memory = vk_to_raw_value_checked(&src.memory);
        dst.memory_offset = vk_to_raw_value(&src.memory_offset);
        dst.flags = vk_to_raw_value(&src.flags);
    }
}

impl VkRawType<VkSparseMemoryBind> for RawVkSparseMemoryBind {
    fn vk_to_wrapped(src: &RawVkSparseMemoryBind) -> VkSparseMemoryBind {
        VkSparseMemoryBind {
            resource_offset: u64::vk_to_wrapped(&src.resource_offset),
            size: u64::vk_to_wrapped(&src.size),
            memory: Some(RawVkDeviceMemory::vk_to_wrapped(&src.memory)),
            memory_offset: u64::vk_to_wrapped(&src.memory_offset),
            flags: RawVkSparseMemoryBindFlags::vk_to_wrapped(&src.flags),
        }
    }
}

impl Default for VkSparseMemoryBind {
    fn default() -> VkSparseMemoryBind {
        VkSparseMemoryBind {
            resource_offset: 0,
            size: 0,
            memory: None,
            memory_offset: 0,
            flags: Default::default(),
        }
    }
}

impl VkSetup for VkSparseMemoryBind {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkSparseMemoryBind {
    fn vk_free(&self) {
        
    }
}