// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkPipelineViewportStateCreateFlags,RawVkPipelineViewportStateCreateFlags};
use vulkan::vk::{VkViewport,RawVkViewport};
use vulkan::vk::{VkRect2D,RawVkRect2D};

/// Wrapper for [VkPipelineViewportStateCreateInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPipelineViewportStateCreateInfo.html).
#[derive(Debug, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    pub flags: VkPipelineViewportStateCreateFlags,
    pub viewports: Option<Vec<VkViewport>>,
    pub scissors: Option<Vec<VkRect2D>>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineViewportStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkPipelineViewportStateCreateFlags,
    pub viewport_count: u32,
    pub viewports: *mut RawVkViewport,
    pub scissor_count: u32,
    pub scissors: *mut RawVkRect2D,
}

impl VkWrappedType<RawVkPipelineViewportStateCreateInfo> for VkPipelineViewportStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineViewportStateCreateInfo, dst: &mut RawVkPipelineViewportStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineViewportStateCreateInfo);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.viewport_count = get_array_option_len(&src.viewports) as u32;
        dst.viewports = new_ptr_vk_array_checked(&src.viewports);
        dst.scissor_count = get_array_option_len(&src.scissors) as u32;
        dst.scissors = new_ptr_vk_array_checked(&src.scissors);
    }
}

impl VkRawType<VkPipelineViewportStateCreateInfo> for RawVkPipelineViewportStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineViewportStateCreateInfo) -> VkPipelineViewportStateCreateInfo {
        VkPipelineViewportStateCreateInfo {
            flags: RawVkPipelineViewportStateCreateFlags::vk_to_wrapped(&src.flags),
            viewports: new_vk_array_checked(src.viewport_count, src.viewports),
            scissors: new_vk_array_checked(src.scissor_count, src.scissors),
        }
    }
}

impl Default for VkPipelineViewportStateCreateInfo {
    fn default() -> VkPipelineViewportStateCreateInfo {
        VkPipelineViewportStateCreateInfo {
            flags: Default::default(),
            viewports: None,
            scissors: None,
        }
    }
}

impl VkSetup for VkPipelineViewportStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineViewportStateCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.viewport_count as usize, self.viewports);
        free_vk_ptr_array(self.scissor_count as usize, self.scissors);
    }
}