// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkFormatFeatureFlags,RawVkFormatFeatureFlags};

/// Wrapper for [VkFormatProperties](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkFormatProperties.html).
#[derive(Debug, Clone)]
pub struct VkFormatProperties {
    pub linear_tiling_features: VkFormatFeatureFlags,
    pub optimal_tiling_features: VkFormatFeatureFlags,
    pub buffer_features: VkFormatFeatureFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkFormatProperties {
    pub linear_tiling_features: RawVkFormatFeatureFlags,
    pub optimal_tiling_features: RawVkFormatFeatureFlags,
    pub buffer_features: RawVkFormatFeatureFlags,
}

impl VkWrappedType<RawVkFormatProperties> for VkFormatProperties {
    fn vk_to_raw(src: &VkFormatProperties, dst: &mut RawVkFormatProperties) {
        dst.linear_tiling_features = vk_to_raw_value(&src.linear_tiling_features);
        dst.optimal_tiling_features = vk_to_raw_value(&src.optimal_tiling_features);
        dst.buffer_features = vk_to_raw_value(&src.buffer_features);
    }
}

impl VkRawType<VkFormatProperties> for RawVkFormatProperties {
    fn vk_to_wrapped(src: &RawVkFormatProperties) -> VkFormatProperties {
        VkFormatProperties {
            linear_tiling_features: RawVkFormatFeatureFlags::vk_to_wrapped(&src.linear_tiling_features),
            optimal_tiling_features: RawVkFormatFeatureFlags::vk_to_wrapped(&src.optimal_tiling_features),
            buffer_features: RawVkFormatFeatureFlags::vk_to_wrapped(&src.buffer_features),
        }
    }
}

impl Default for VkFormatProperties {
    fn default() -> VkFormatProperties {
        VkFormatProperties {
            linear_tiling_features: Default::default(),
            optimal_tiling_features: Default::default(),
            buffer_features: Default::default(),
        }
    }
}

impl VkSetup for VkFormatProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkFormatProperties {
    fn vk_free(&self) {
        
    }
}