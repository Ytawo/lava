// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkRect2D,RawVkRect2D};

/// Wrapper for [VkDeviceGroupRenderPassBeginInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDeviceGroupRenderPassBeginInfo.html).
#[derive(Debug, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    pub device_mask: u32,
    pub device_render_areas: Vec<VkRect2D>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDeviceGroupRenderPassBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub device_mask: u32,
    pub device_render_area_count: u32,
    pub device_render_areas: *mut RawVkRect2D,
}

impl VkWrappedType<RawVkDeviceGroupRenderPassBeginInfo> for VkDeviceGroupRenderPassBeginInfo {
    fn vk_to_raw(src: &VkDeviceGroupRenderPassBeginInfo, dst: &mut RawVkDeviceGroupRenderPassBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DeviceGroupRenderPassBeginInfo);
        dst.next = ptr::null_mut();
        dst.device_mask = src.device_mask;
        dst.device_render_area_count = src.device_render_areas.len() as u32;
        dst.device_render_areas = new_ptr_vk_array(&src.device_render_areas);
    }
}

impl VkRawType<VkDeviceGroupRenderPassBeginInfo> for RawVkDeviceGroupRenderPassBeginInfo {
    fn vk_to_wrapped(src: &RawVkDeviceGroupRenderPassBeginInfo) -> VkDeviceGroupRenderPassBeginInfo {
        VkDeviceGroupRenderPassBeginInfo {
            device_mask: src.device_mask,
            device_render_areas: new_vk_array(src.device_render_area_count, src.device_render_areas),
        }
    }
}

impl Default for VkDeviceGroupRenderPassBeginInfo {
    fn default() -> VkDeviceGroupRenderPassBeginInfo {
        VkDeviceGroupRenderPassBeginInfo {
            device_mask: 0,
            device_render_areas: Vec::new(),
        }
    }
}

impl VkSetup for VkDeviceGroupRenderPassBeginInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDeviceGroupRenderPassBeginInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.device_render_area_count as usize, self.device_render_areas);
    }
}