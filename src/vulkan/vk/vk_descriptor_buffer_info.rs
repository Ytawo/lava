// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkBuffer,RawVkBuffer};

/// Wrapper for [VkDescriptorBufferInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDescriptorBufferInfo.html).
#[derive(Debug, Clone)]
pub struct VkDescriptorBufferInfo {
    pub buffer: VkBuffer,
    pub offset: usize,
    pub range: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDescriptorBufferInfo {
    pub buffer: RawVkBuffer,
    pub offset: u64,
    pub range: u64,
}

impl VkWrappedType<RawVkDescriptorBufferInfo> for VkDescriptorBufferInfo {
    fn vk_to_raw(src: &VkDescriptorBufferInfo, dst: &mut RawVkDescriptorBufferInfo) {
        dst.buffer = vk_to_raw_value(&src.buffer);
        dst.offset = vk_to_raw_value(&src.offset);
        dst.range = vk_to_raw_value(&src.range);
    }
}

impl VkRawType<VkDescriptorBufferInfo> for RawVkDescriptorBufferInfo {
    fn vk_to_wrapped(src: &RawVkDescriptorBufferInfo) -> VkDescriptorBufferInfo {
        VkDescriptorBufferInfo {
            buffer: RawVkBuffer::vk_to_wrapped(&src.buffer),
            offset: u64::vk_to_wrapped(&src.offset),
            range: u64::vk_to_wrapped(&src.range),
        }
    }
}

impl Default for VkDescriptorBufferInfo {
    fn default() -> VkDescriptorBufferInfo {
        VkDescriptorBufferInfo {
            buffer: Default::default(),
            offset: 0,
            range: 0,
        }
    }
}

impl VkSetup for VkDescriptorBufferInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.buffer, fn_table);
    }
}

impl VkFree for RawVkDescriptorBufferInfo {
    fn vk_free(&self) {
        
    }
}