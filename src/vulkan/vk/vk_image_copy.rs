// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkImageSubresourceLayers,RawVkImageSubresourceLayers};
use vulkan::vk::{VkOffset3D,RawVkOffset3D};
use vulkan::vk::{VkExtent3D,RawVkExtent3D};

/// Wrapper for [VkImageCopy](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkImageCopy.html).
#[derive(Debug, Clone)]
pub struct VkImageCopy {
    pub src_subresource: VkImageSubresourceLayers,
    pub src_offset: VkOffset3D,
    pub dst_subresource: VkImageSubresourceLayers,
    pub dst_offset: VkOffset3D,
    pub extent: VkExtent3D,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkImageCopy {
    pub src_subresource: RawVkImageSubresourceLayers,
    pub src_offset: RawVkOffset3D,
    pub dst_subresource: RawVkImageSubresourceLayers,
    pub dst_offset: RawVkOffset3D,
    pub extent: RawVkExtent3D,
}

impl VkWrappedType<RawVkImageCopy> for VkImageCopy {
    fn vk_to_raw(src: &VkImageCopy, dst: &mut RawVkImageCopy) {
        dst.src_subresource = vk_to_raw_value(&src.src_subresource);
        dst.src_offset = vk_to_raw_value(&src.src_offset);
        dst.dst_subresource = vk_to_raw_value(&src.dst_subresource);
        dst.dst_offset = vk_to_raw_value(&src.dst_offset);
        dst.extent = vk_to_raw_value(&src.extent);
    }
}

impl VkRawType<VkImageCopy> for RawVkImageCopy {
    fn vk_to_wrapped(src: &RawVkImageCopy) -> VkImageCopy {
        VkImageCopy {
            src_subresource: RawVkImageSubresourceLayers::vk_to_wrapped(&src.src_subresource),
            src_offset: RawVkOffset3D::vk_to_wrapped(&src.src_offset),
            dst_subresource: RawVkImageSubresourceLayers::vk_to_wrapped(&src.dst_subresource),
            dst_offset: RawVkOffset3D::vk_to_wrapped(&src.dst_offset),
            extent: RawVkExtent3D::vk_to_wrapped(&src.extent),
        }
    }
}

impl Default for VkImageCopy {
    fn default() -> VkImageCopy {
        VkImageCopy {
            src_subresource: Default::default(),
            src_offset: Default::default(),
            dst_subresource: Default::default(),
            dst_offset: Default::default(),
            extent: Default::default(),
        }
    }
}

impl VkSetup for VkImageCopy {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.src_subresource, fn_table);
        VkSetup::vk_setup(&mut self.src_offset, fn_table);
        VkSetup::vk_setup(&mut self.dst_subresource, fn_table);
        VkSetup::vk_setup(&mut self.dst_offset, fn_table);
        VkSetup::vk_setup(&mut self.extent, fn_table);
    }
}

impl VkFree for RawVkImageCopy {
    fn vk_free(&self) {
        
    }
}