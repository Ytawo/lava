// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkBufferCreateFlags,RawVkBufferCreateFlags};
use vulkan::vk::{VkBufferUsageFlags,RawVkBufferUsageFlags};
use vulkan::vk::{VkExternalMemoryHandleTypeFlags,RawVkExternalMemoryHandleTypeFlags};

/// Wrapper for [VkPhysicalDeviceExternalBufferInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceExternalBufferInfo.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    pub flags: VkBufferCreateFlags,
    pub usage: VkBufferUsageFlags,
    pub handle_type: VkExternalMemoryHandleTypeFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceExternalBufferInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkBufferCreateFlags,
    pub usage: RawVkBufferUsageFlags,
    pub handle_type: RawVkExternalMemoryHandleTypeFlags,
}

impl VkWrappedType<RawVkPhysicalDeviceExternalBufferInfo> for VkPhysicalDeviceExternalBufferInfo {
    fn vk_to_raw(src: &VkPhysicalDeviceExternalBufferInfo, dst: &mut RawVkPhysicalDeviceExternalBufferInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceExternalBufferInfo);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.usage = vk_to_raw_value(&src.usage);
        dst.handle_type = vk_to_raw_value(&src.handle_type);
    }
}

impl VkRawType<VkPhysicalDeviceExternalBufferInfo> for RawVkPhysicalDeviceExternalBufferInfo {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceExternalBufferInfo) -> VkPhysicalDeviceExternalBufferInfo {
        VkPhysicalDeviceExternalBufferInfo {
            flags: RawVkBufferCreateFlags::vk_to_wrapped(&src.flags),
            usage: RawVkBufferUsageFlags::vk_to_wrapped(&src.usage),
            handle_type: RawVkExternalMemoryHandleTypeFlags::vk_to_wrapped(&src.handle_type),
        }
    }
}

impl Default for VkPhysicalDeviceExternalBufferInfo {
    fn default() -> VkPhysicalDeviceExternalBufferInfo {
        VkPhysicalDeviceExternalBufferInfo {
            flags: Default::default(),
            usage: Default::default(),
            handle_type: Default::default(),
        }
    }
}

impl VkSetup for VkPhysicalDeviceExternalBufferInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceExternalBufferInfo {
    fn vk_free(&self) {
        
    }
}