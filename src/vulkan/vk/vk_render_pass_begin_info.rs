// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkRenderPass,RawVkRenderPass};
use vulkan::vk::{VkFramebuffer,RawVkFramebuffer};
use vulkan::vk::{VkRect2D,RawVkRect2D};
use vulkan::vk::{VkClearValue,RawVkClearValue};

/// Wrapper for [VkRenderPassBeginInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkRenderPassBeginInfo.html).
#[derive(Debug, Clone)]
pub struct VkRenderPassBeginInfo {
    pub render_pass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub render_area: VkRect2D,
    pub clear_values: Vec<VkClearValue>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkRenderPassBeginInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub render_pass: RawVkRenderPass,
    pub framebuffer: RawVkFramebuffer,
    pub render_area: RawVkRect2D,
    pub clear_value_count: u32,
    pub clear_values: *mut RawVkClearValue,
}

impl VkWrappedType<RawVkRenderPassBeginInfo> for VkRenderPassBeginInfo {
    fn vk_to_raw(src: &VkRenderPassBeginInfo, dst: &mut RawVkRenderPassBeginInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::RenderPassBeginInfo);
        dst.next = ptr::null_mut();
        dst.render_pass = vk_to_raw_value(&src.render_pass);
        dst.framebuffer = vk_to_raw_value(&src.framebuffer);
        dst.render_area = vk_to_raw_value(&src.render_area);
        dst.clear_value_count = src.clear_values.len() as u32;
        dst.clear_values = new_ptr_vk_array(&src.clear_values);
    }
}

impl Default for VkRenderPassBeginInfo {
    fn default() -> VkRenderPassBeginInfo {
        VkRenderPassBeginInfo {
            render_pass: Default::default(),
            framebuffer: Default::default(),
            render_area: Default::default(),
            clear_values: Vec::new(),
        }
    }
}

impl VkSetup for VkRenderPassBeginInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.render_pass, fn_table);
        VkSetup::vk_setup(&mut self.framebuffer, fn_table);
        VkSetup::vk_setup(&mut self.render_area, fn_table);
    }
}

impl VkFree for RawVkRenderPassBeginInfo {
    fn vk_free(&self) {
        free_ptr(self.clear_values);
    }
}