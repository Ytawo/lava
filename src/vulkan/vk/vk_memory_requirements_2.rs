// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkMemoryRequirements,RawVkMemoryRequirements};

/// Wrapper for [VkMemoryRequirements2](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkMemoryRequirements2.html).
#[derive(Debug, Clone)]
pub struct VkMemoryRequirements2 {
    pub memory_requirements: VkMemoryRequirements,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkMemoryRequirements2 {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub memory_requirements: RawVkMemoryRequirements,
}

impl VkWrappedType<RawVkMemoryRequirements2> for VkMemoryRequirements2 {
    fn vk_to_raw(src: &VkMemoryRequirements2, dst: &mut RawVkMemoryRequirements2) {
        dst.s_type = vk_to_raw_value(&VkStructureType::MemoryRequirements2);
        dst.next = ptr::null_mut();
        dst.memory_requirements = vk_to_raw_value(&src.memory_requirements);
    }
}

impl VkRawType<VkMemoryRequirements2> for RawVkMemoryRequirements2 {
    fn vk_to_wrapped(src: &RawVkMemoryRequirements2) -> VkMemoryRequirements2 {
        VkMemoryRequirements2 {
            memory_requirements: RawVkMemoryRequirements::vk_to_wrapped(&src.memory_requirements),
        }
    }
}

impl Default for VkMemoryRequirements2 {
    fn default() -> VkMemoryRequirements2 {
        VkMemoryRequirements2 {
            memory_requirements: Default::default(),
        }
    }
}

impl VkSetup for VkMemoryRequirements2 {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.memory_requirements, fn_table);
    }
}

impl VkFree for RawVkMemoryRequirements2 {
    fn vk_free(&self) {
        
    }
}