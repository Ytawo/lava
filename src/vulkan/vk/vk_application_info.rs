// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkVersion};

/// Wrapper for [VkApplicationInfo](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkApplicationInfo.html).
#[derive(Debug, Clone)]
pub struct VkApplicationInfo<'a, 'b> {
    pub application_name: Option<&'a str>,
    pub application_version: u32,
    pub engine_name: Option<&'b str>,
    pub engine_version: u32,
    pub api_version: VkVersion,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkApplicationInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub application_name: *mut c_char,
    pub application_version: u32,
    pub engine_name: *mut c_char,
    pub engine_version: u32,
    pub api_version: u32,
}

impl<'a, 'b> VkWrappedType<RawVkApplicationInfo> for VkApplicationInfo<'a, 'b> {
    fn vk_to_raw(src: &VkApplicationInfo, dst: &mut RawVkApplicationInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::ApplicationInfo);
        dst.next = ptr::null_mut();
        dst.application_name = new_ptr_string_checked(&src.application_name);
        dst.application_version = src.application_version;
        dst.engine_name = new_ptr_string_checked(&src.engine_name);
        dst.engine_version = src.engine_version;
        dst.api_version = vk_to_raw_value(&src.api_version);
    }
}

impl<'a, 'b> VkRawType<VkApplicationInfo<'a, 'b>> for RawVkApplicationInfo {
    fn vk_to_wrapped(src: &RawVkApplicationInfo) -> VkApplicationInfo<'a, 'b> {
        VkApplicationInfo {
            application_name: new_string_ref_checked(src.application_name),
            application_version: src.application_version,
            engine_name: new_string_ref_checked(src.engine_name),
            engine_version: src.engine_version,
            api_version: u32::vk_to_wrapped(&src.api_version),
        }
    }
}

impl Default for VkApplicationInfo<'static, 'static> {
    fn default() -> VkApplicationInfo<'static, 'static> {
        VkApplicationInfo {
            application_name: None,
            application_version: 0,
            engine_name: None,
            engine_version: 0,
            api_version: Default::default(),
        }
    }
}

impl<'a, 'b> VkSetup for VkApplicationInfo<'a, 'b> {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkApplicationInfo {
    fn vk_free(&self) {
        free_ptr(self.application_name);
        free_ptr(self.engine_name);
    }
}