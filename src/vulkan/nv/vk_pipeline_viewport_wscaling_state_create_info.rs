// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkViewportWScaling,RawVkViewportWScaling};

/// Wrapper for [VkPipelineViewportWScalingStateCreateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPipelineViewportWScalingStateCreateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkPipelineViewportWScalingStateCreateInfo {
    pub viewport_wscaling_enable: bool,
    pub viewport_wscalings: Option<Vec<VkViewportWScaling>>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPipelineViewportWScalingStateCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub viewport_wscaling_enable: u32,
    pub viewport_count: u32,
    pub viewport_wscalings: *mut RawVkViewportWScaling,
}

impl VkWrappedType<RawVkPipelineViewportWScalingStateCreateInfo> for VkPipelineViewportWScalingStateCreateInfo {
    fn vk_to_raw(src: &VkPipelineViewportWScalingStateCreateInfo, dst: &mut RawVkPipelineViewportWScalingStateCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PipelineViewportWScalingStateCreateInfoNv);
        dst.next = ptr::null_mut();
        dst.viewport_wscaling_enable = vk_to_raw_value(&src.viewport_wscaling_enable);
        dst.viewport_count = get_array_option_len(&src.viewport_wscalings) as u32;
        dst.viewport_wscalings = new_ptr_vk_array_checked(&src.viewport_wscalings);
    }
}

impl VkRawType<VkPipelineViewportWScalingStateCreateInfo> for RawVkPipelineViewportWScalingStateCreateInfo {
    fn vk_to_wrapped(src: &RawVkPipelineViewportWScalingStateCreateInfo) -> VkPipelineViewportWScalingStateCreateInfo {
        VkPipelineViewportWScalingStateCreateInfo {
            viewport_wscaling_enable: u32::vk_to_wrapped(&src.viewport_wscaling_enable),
            viewport_wscalings: new_vk_array_checked(src.viewport_count, src.viewport_wscalings),
        }
    }
}

impl Default for VkPipelineViewportWScalingStateCreateInfo {
    fn default() -> VkPipelineViewportWScalingStateCreateInfo {
        VkPipelineViewportWScalingStateCreateInfo {
            viewport_wscaling_enable: false,
            viewport_wscalings: None,
        }
    }
}

impl VkSetup for VkPipelineViewportWScalingStateCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPipelineViewportWScalingStateCreateInfo {
    fn vk_free(&self) {
        free_vk_ptr_array(self.viewport_count as usize, self.viewport_wscalings);
    }
}