// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkBuffer,RawVkBuffer};

/// Wrapper for [VkGeometryAABBNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkGeometryAABBNV.html).
#[derive(Debug, Clone)]
pub struct VkGeometryAABB {
    pub aabb_data: Option<VkBuffer>,
    pub num_aabbs: usize,
    pub stride: usize,
    pub offset: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkGeometryAABB {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub aabb_data: RawVkBuffer,
    pub num_aabbs: u32,
    pub stride: u32,
    pub offset: u64,
}

impl VkWrappedType<RawVkGeometryAABB> for VkGeometryAABB {
    fn vk_to_raw(src: &VkGeometryAABB, dst: &mut RawVkGeometryAABB) {
        dst.s_type = vk_to_raw_value(&VkStructureType::GeometryAabbNv);
        dst.next = ptr::null_mut();
        dst.aabb_data = vk_to_raw_value_checked(&src.aabb_data);
        dst.num_aabbs = vk_to_raw_value(&src.num_aabbs);
        dst.stride = vk_to_raw_value(&src.stride);
        dst.offset = vk_to_raw_value(&src.offset);
    }
}

impl VkRawType<VkGeometryAABB> for RawVkGeometryAABB {
    fn vk_to_wrapped(src: &RawVkGeometryAABB) -> VkGeometryAABB {
        VkGeometryAABB {
            aabb_data: Some(RawVkBuffer::vk_to_wrapped(&src.aabb_data)),
            num_aabbs: u32::vk_to_wrapped(&src.num_aabbs),
            stride: u32::vk_to_wrapped(&src.stride),
            offset: u64::vk_to_wrapped(&src.offset),
        }
    }
}

impl Default for VkGeometryAABB {
    fn default() -> VkGeometryAABB {
        VkGeometryAABB {
            aabb_data: None,
            num_aabbs: 0,
            stride: 0,
            offset: 0,
        }
    }
}

impl VkSetup for VkGeometryAABB {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkGeometryAABB {
    fn vk_free(&self) {
        
    }
}