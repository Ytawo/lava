// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkGeometryType,RawVkGeometryType};
use vulkan::nv::{VkGeometryData,RawVkGeometryData};
use vulkan::nv::{VkGeometryFlags,RawVkGeometryFlags};

/// Wrapper for [VkGeometryNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkGeometryNV.html).
#[derive(Debug, Clone)]
pub struct VkGeometry {
    pub geometry_type: VkGeometryType,
    pub geometry: VkGeometryData,
    pub flags: VkGeometryFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkGeometry {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub geometry_type: RawVkGeometryType,
    pub geometry: RawVkGeometryData,
    pub flags: RawVkGeometryFlags,
}

impl VkWrappedType<RawVkGeometry> for VkGeometry {
    fn vk_to_raw(src: &VkGeometry, dst: &mut RawVkGeometry) {
        dst.s_type = vk_to_raw_value(&VkStructureType::GeometryNv);
        dst.next = ptr::null_mut();
        dst.geometry_type = vk_to_raw_value(&src.geometry_type);
        dst.geometry = vk_to_raw_value(&src.geometry);
        dst.flags = vk_to_raw_value(&src.flags);
    }
}

impl VkRawType<VkGeometry> for RawVkGeometry {
    fn vk_to_wrapped(src: &RawVkGeometry) -> VkGeometry {
        VkGeometry {
            geometry_type: RawVkGeometryType::vk_to_wrapped(&src.geometry_type),
            geometry: RawVkGeometryData::vk_to_wrapped(&src.geometry),
            flags: RawVkGeometryFlags::vk_to_wrapped(&src.flags),
        }
    }
}

impl Default for VkGeometry {
    fn default() -> VkGeometry {
        VkGeometry {
            geometry_type: Default::default(),
            geometry: Default::default(),
            flags: Default::default(),
        }
    }
}

impl VkSetup for VkGeometry {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.geometry, fn_table);
    }
}

impl VkFree for RawVkGeometry {
    fn vk_free(&self) {
        
    }
}