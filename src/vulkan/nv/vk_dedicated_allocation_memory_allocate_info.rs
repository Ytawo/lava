// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkImage,RawVkImage};
use vulkan::vk::{VkBuffer,RawVkBuffer};

/// Wrapper for [VkDedicatedAllocationMemoryAllocateInfoNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDedicatedAllocationMemoryAllocateInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkDedicatedAllocationMemoryAllocateInfo {
    pub image: Option<VkImage>,
    pub buffer: Option<VkBuffer>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDedicatedAllocationMemoryAllocateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub image: RawVkImage,
    pub buffer: RawVkBuffer,
}

impl VkWrappedType<RawVkDedicatedAllocationMemoryAllocateInfo> for VkDedicatedAllocationMemoryAllocateInfo {
    fn vk_to_raw(src: &VkDedicatedAllocationMemoryAllocateInfo, dst: &mut RawVkDedicatedAllocationMemoryAllocateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DedicatedAllocationMemoryAllocateInfoNv);
        dst.next = ptr::null_mut();
        dst.image = vk_to_raw_value_checked(&src.image);
        dst.buffer = vk_to_raw_value_checked(&src.buffer);
    }
}

impl VkRawType<VkDedicatedAllocationMemoryAllocateInfo> for RawVkDedicatedAllocationMemoryAllocateInfo {
    fn vk_to_wrapped(src: &RawVkDedicatedAllocationMemoryAllocateInfo) -> VkDedicatedAllocationMemoryAllocateInfo {
        VkDedicatedAllocationMemoryAllocateInfo {
            image: Some(RawVkImage::vk_to_wrapped(&src.image)),
            buffer: Some(RawVkBuffer::vk_to_wrapped(&src.buffer)),
        }
    }
}

impl Default for VkDedicatedAllocationMemoryAllocateInfo {
    fn default() -> VkDedicatedAllocationMemoryAllocateInfo {
        VkDedicatedAllocationMemoryAllocateInfo {
            image: None,
            buffer: None,
        }
    }
}

impl VkSetup for VkDedicatedAllocationMemoryAllocateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDedicatedAllocationMemoryAllocateInfo {
    fn vk_free(&self) {
        
    }
}