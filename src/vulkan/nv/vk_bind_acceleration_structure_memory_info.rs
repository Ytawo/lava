// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::nv::{VkAccelerationStructure,RawVkAccelerationStructure};
use vulkan::vk::{VkDeviceMemory,RawVkDeviceMemory};

/// Wrapper for [VkBindAccelerationStructureMemoryInfoNV](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkBindAccelerationStructureMemoryInfoNV.html).
#[derive(Debug, Clone)]
pub struct VkBindAccelerationStructureMemoryInfo {
    pub acceleration_structure: VkAccelerationStructure,
    pub memory: VkDeviceMemory,
    pub memory_offset: usize,
    pub device_indices: Vec<usize>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkBindAccelerationStructureMemoryInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub acceleration_structure: RawVkAccelerationStructure,
    pub memory: RawVkDeviceMemory,
    pub memory_offset: u64,
    pub device_index_count: u32,
    pub device_indices: *mut u32,
}

impl VkWrappedType<RawVkBindAccelerationStructureMemoryInfo> for VkBindAccelerationStructureMemoryInfo {
    fn vk_to_raw(src: &VkBindAccelerationStructureMemoryInfo, dst: &mut RawVkBindAccelerationStructureMemoryInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::BindAccelerationStructureMemoryInfoNv);
        dst.next = ptr::null_mut();
        dst.acceleration_structure = vk_to_raw_value(&src.acceleration_structure);
        dst.memory = vk_to_raw_value(&src.memory);
        dst.memory_offset = vk_to_raw_value(&src.memory_offset);
        dst.device_index_count = src.device_indices.len() as u32;
        dst.device_indices = new_ptr_vk_array(&src.device_indices);
    }
}

impl VkRawType<VkBindAccelerationStructureMemoryInfo> for RawVkBindAccelerationStructureMemoryInfo {
    fn vk_to_wrapped(src: &RawVkBindAccelerationStructureMemoryInfo) -> VkBindAccelerationStructureMemoryInfo {
        VkBindAccelerationStructureMemoryInfo {
            acceleration_structure: RawVkAccelerationStructure::vk_to_wrapped(&src.acceleration_structure),
            memory: RawVkDeviceMemory::vk_to_wrapped(&src.memory),
            memory_offset: u64::vk_to_wrapped(&src.memory_offset),
            device_indices: new_vk_array(src.device_index_count, src.device_indices),
        }
    }
}

impl Default for VkBindAccelerationStructureMemoryInfo {
    fn default() -> VkBindAccelerationStructureMemoryInfo {
        VkBindAccelerationStructureMemoryInfo {
            acceleration_structure: Default::default(),
            memory: Default::default(),
            memory_offset: 0,
            device_indices: Vec::new(),
        }
    }
}

impl VkSetup for VkBindAccelerationStructureMemoryInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.acceleration_structure, fn_table);
        VkSetup::vk_setup(&mut self.memory, fn_table);
    }
}

impl VkFree for RawVkBindAccelerationStructureMemoryInfo {
    fn vk_free(&self) {
        free_ptr(self.device_indices);
    }
}