// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkSwapchain,RawVkSwapchain};
use vulkan::vk::{VkSemaphore,RawVkSemaphore};
use vulkan::vk::{VkFence,RawVkFence};

/// Wrapper for [VkAcquireNextImageInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkAcquireNextImageInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkAcquireNextImageInfo {
    pub swapchain: VkSwapchain,
    pub timeout: u64,
    pub semaphore: Option<VkSemaphore>,
    pub fence: Option<VkFence>,
    pub device_mask: u32,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkAcquireNextImageInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub swapchain: RawVkSwapchain,
    pub timeout: u64,
    pub semaphore: RawVkSemaphore,
    pub fence: RawVkFence,
    pub device_mask: u32,
}

impl VkWrappedType<RawVkAcquireNextImageInfo> for VkAcquireNextImageInfo {
    fn vk_to_raw(src: &VkAcquireNextImageInfo, dst: &mut RawVkAcquireNextImageInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::AcquireNextImageInfoKhr);
        dst.next = ptr::null_mut();
        dst.swapchain = vk_to_raw_value(&src.swapchain);
        dst.timeout = src.timeout;
        dst.semaphore = vk_to_raw_value_checked(&src.semaphore);
        dst.fence = vk_to_raw_value_checked(&src.fence);
        dst.device_mask = src.device_mask;
    }
}

impl VkRawType<VkAcquireNextImageInfo> for RawVkAcquireNextImageInfo {
    fn vk_to_wrapped(src: &RawVkAcquireNextImageInfo) -> VkAcquireNextImageInfo {
        VkAcquireNextImageInfo {
            swapchain: RawVkSwapchain::vk_to_wrapped(&src.swapchain),
            timeout: src.timeout,
            semaphore: Some(RawVkSemaphore::vk_to_wrapped(&src.semaphore)),
            fence: Some(RawVkFence::vk_to_wrapped(&src.fence)),
            device_mask: src.device_mask,
        }
    }
}

impl Default for VkAcquireNextImageInfo {
    fn default() -> VkAcquireNextImageInfo {
        VkAcquireNextImageInfo {
            swapchain: Default::default(),
            timeout: 0,
            semaphore: None,
            fence: None,
            device_mask: 0,
        }
    }
}

impl VkSetup for VkAcquireNextImageInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.swapchain, fn_table);
    }
}

impl VkFree for RawVkAcquireNextImageInfo {
    fn vk_free(&self) {
        
    }
}