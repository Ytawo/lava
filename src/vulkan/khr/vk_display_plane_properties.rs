// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::khr::{VkDisplay,RawVkDisplay};

/// Wrapper for [VkDisplayPlanePropertiesKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDisplayPlanePropertiesKHR.html).
#[derive(Debug, Clone)]
pub struct VkDisplayPlaneProperties {
    pub current_display: VkDisplay,
    pub current_stack_index: usize,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDisplayPlaneProperties {
    pub current_display: RawVkDisplay,
    pub current_stack_index: u32,
}

impl VkRawType<VkDisplayPlaneProperties> for RawVkDisplayPlaneProperties {
    fn vk_to_wrapped(src: &RawVkDisplayPlaneProperties) -> VkDisplayPlaneProperties {
        VkDisplayPlaneProperties {
            current_display: RawVkDisplay::vk_to_wrapped(&src.current_display),
            current_stack_index: u32::vk_to_wrapped(&src.current_stack_index),
        }
    }
}

impl VkSetup for VkDisplayPlaneProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.current_display, fn_table);
    }
}

impl VkFree for RawVkDisplayPlaneProperties {
    fn vk_free(&self) {
        
    }
}