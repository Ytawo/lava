// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkDeviceMemory,RawVkDeviceMemory};
use vulkan::vk::{VkExternalMemoryHandleTypeFlags,RawVkExternalMemoryHandleTypeFlags};

/// Wrapper for [VkMemoryGetFdInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkMemoryGetFdInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkMemoryGetFdInfo {
    pub memory: VkDeviceMemory,
    pub handle_type: VkExternalMemoryHandleTypeFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkMemoryGetFdInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub memory: RawVkDeviceMemory,
    pub handle_type: RawVkExternalMemoryHandleTypeFlags,
}

impl VkWrappedType<RawVkMemoryGetFdInfo> for VkMemoryGetFdInfo {
    fn vk_to_raw(src: &VkMemoryGetFdInfo, dst: &mut RawVkMemoryGetFdInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::MemoryGetFdInfoKhr);
        dst.next = ptr::null_mut();
        dst.memory = vk_to_raw_value(&src.memory);
        dst.handle_type = vk_to_raw_value(&src.handle_type);
    }
}

impl VkRawType<VkMemoryGetFdInfo> for RawVkMemoryGetFdInfo {
    fn vk_to_wrapped(src: &RawVkMemoryGetFdInfo) -> VkMemoryGetFdInfo {
        VkMemoryGetFdInfo {
            memory: RawVkDeviceMemory::vk_to_wrapped(&src.memory),
            handle_type: RawVkExternalMemoryHandleTypeFlags::vk_to_wrapped(&src.handle_type),
        }
    }
}

impl Default for VkMemoryGetFdInfo {
    fn default() -> VkMemoryGetFdInfo {
        VkMemoryGetFdInfo {
            memory: Default::default(),
            handle_type: Default::default(),
        }
    }
}

impl VkSetup for VkMemoryGetFdInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.memory, fn_table);
    }
}

impl VkFree for RawVkMemoryGetFdInfo {
    fn vk_free(&self) {
        
    }
}