// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkDeviceGroupPresentModeFlags,RawVkDeviceGroupPresentModeFlags};

/// Wrapper for [VkDeviceGroupPresentInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDeviceGroupPresentInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkDeviceGroupPresentInfo {
    pub device_masks: Vec<u32>,
    pub mode: VkDeviceGroupPresentModeFlags,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDeviceGroupPresentInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub swapchain_count: u32,
    pub device_masks: *mut u32,
    pub mode: RawVkDeviceGroupPresentModeFlags,
}

impl VkWrappedType<RawVkDeviceGroupPresentInfo> for VkDeviceGroupPresentInfo {
    fn vk_to_raw(src: &VkDeviceGroupPresentInfo, dst: &mut RawVkDeviceGroupPresentInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DeviceGroupPresentInfoKhr);
        dst.next = ptr::null_mut();
        dst.swapchain_count = src.device_masks.len() as u32;
        dst.device_masks = get_vec_ptr(&src.device_masks);
        dst.mode = vk_to_raw_value(&src.mode);
    }
}

impl VkRawType<VkDeviceGroupPresentInfo> for RawVkDeviceGroupPresentInfo {
    fn vk_to_wrapped(src: &RawVkDeviceGroupPresentInfo) -> VkDeviceGroupPresentInfo {
        VkDeviceGroupPresentInfo {
            device_masks: vec_from_ptr(src.swapchain_count as usize, src.device_masks),
            mode: RawVkDeviceGroupPresentModeFlags::vk_to_wrapped(&src.mode),
        }
    }
}

impl Default for VkDeviceGroupPresentInfo {
    fn default() -> VkDeviceGroupPresentInfo {
        VkDeviceGroupPresentInfo {
            device_masks: Vec::new(),
            mode: Default::default(),
        }
    }
}

impl VkSetup for VkDeviceGroupPresentInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkDeviceGroupPresentInfo {
    fn vk_free(&self) {
        
    }
}