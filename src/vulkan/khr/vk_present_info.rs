// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::vk::{VkSemaphore,RawVkSemaphore};
use vulkan::khr::{VkSwapchain,RawVkSwapchain};
use vulkan::vk::{VkResult,RawVkResult};

/// Wrapper for [VkPresentInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPresentInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkPresentInfo {
    pub wait_semaphores: Vec<VkSemaphore>,
    pub swapchains: Vec<VkSwapchain>,
    pub image_indices: Vec<usize>,
    pub results: Option<Vec<VkResult>>,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPresentInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub wait_semaphore_count: u32,
    pub wait_semaphores: *mut RawVkSemaphore,
    pub swapchain_count: u32,
    pub swapchains: *mut RawVkSwapchain,
    pub image_indices: *mut u32,
    pub results: *mut RawVkResult,
}

impl VkWrappedType<RawVkPresentInfo> for VkPresentInfo {
    fn vk_to_raw(src: &VkPresentInfo, dst: &mut RawVkPresentInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PresentInfoKhr);
        dst.next = ptr::null_mut();
        dst.wait_semaphore_count = src.wait_semaphores.len() as u32;
        dst.wait_semaphores = new_ptr_vk_array(&src.wait_semaphores);
        dst.swapchain_count = cmp::max(src.swapchains.len(), src.image_indices.len()) as u32;
        dst.swapchains = new_ptr_vk_array(&src.swapchains);
        dst.image_indices = new_ptr_vk_array(&src.image_indices);
        dst.results = new_ptr_vk_array_checked(&src.results);
    }
}

impl VkRawType<VkPresentInfo> for RawVkPresentInfo {
    fn vk_to_wrapped(src: &RawVkPresentInfo) -> VkPresentInfo {
        VkPresentInfo {
            wait_semaphores: new_vk_array(src.wait_semaphore_count, src.wait_semaphores),
            swapchains: new_vk_array(src.swapchain_count, src.swapchains),
            image_indices: new_vk_array(src.swapchain_count, src.image_indices),
            results: new_vk_array_checked(src.swapchain_count, src.results),
        }
    }
}

impl Default for VkPresentInfo {
    fn default() -> VkPresentInfo {
        VkPresentInfo {
            wait_semaphores: Vec::new(),
            swapchains: Vec::new(),
            image_indices: Vec::new(),
            results: None,
        }
    }
}

impl VkSetup for VkPresentInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPresentInfo {
    fn vk_free(&self) {
        free_ptr(self.wait_semaphores);
        free_ptr(self.swapchains);
        free_ptr(self.image_indices);
        free_ptr(self.results);
    }
}