// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};

/// Wrapper for [VkPhysicalDeviceShaderAtomicInt64FeaturesKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    pub shader_buffer_int_64_atomics: bool,
    pub shader_shared_int_64_atomics: bool,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkPhysicalDeviceShaderAtomicInt64Features {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub shader_buffer_int_64_atomics: u32,
    pub shader_shared_int_64_atomics: u32,
}

impl VkWrappedType<RawVkPhysicalDeviceShaderAtomicInt64Features> for VkPhysicalDeviceShaderAtomicInt64Features {
    fn vk_to_raw(src: &VkPhysicalDeviceShaderAtomicInt64Features, dst: &mut RawVkPhysicalDeviceShaderAtomicInt64Features) {
        dst.s_type = vk_to_raw_value(&VkStructureType::PhysicalDeviceShaderAtomicInt64FeaturesKhr);
        dst.next = ptr::null_mut();
        dst.shader_buffer_int_64_atomics = vk_to_raw_value(&src.shader_buffer_int_64_atomics);
        dst.shader_shared_int_64_atomics = vk_to_raw_value(&src.shader_shared_int_64_atomics);
    }
}

impl VkRawType<VkPhysicalDeviceShaderAtomicInt64Features> for RawVkPhysicalDeviceShaderAtomicInt64Features {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceShaderAtomicInt64Features) -> VkPhysicalDeviceShaderAtomicInt64Features {
        VkPhysicalDeviceShaderAtomicInt64Features {
            shader_buffer_int_64_atomics: u32::vk_to_wrapped(&src.shader_buffer_int_64_atomics),
            shader_shared_int_64_atomics: u32::vk_to_wrapped(&src.shader_shared_int_64_atomics),
        }
    }
}

impl Default for VkPhysicalDeviceShaderAtomicInt64Features {
    fn default() -> VkPhysicalDeviceShaderAtomicInt64Features {
        VkPhysicalDeviceShaderAtomicInt64Features {
            shader_buffer_int_64_atomics: false,
            shader_shared_int_64_atomics: false,
        }
    }
}

impl VkSetup for VkPhysicalDeviceShaderAtomicInt64Features {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkPhysicalDeviceShaderAtomicInt64Features {
    fn vk_free(&self) {
        
    }
}