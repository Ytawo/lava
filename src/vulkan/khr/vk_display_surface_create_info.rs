// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkDisplaySurfaceCreateFlags,RawVkDisplaySurfaceCreateFlags};
use vulkan::khr::{VkDisplayMode,RawVkDisplayMode};
use vulkan::khr::{VkSurfaceTransformFlags,RawVkSurfaceTransformFlags};
use vulkan::khr::{VkDisplayPlaneAlphaFlags,RawVkDisplayPlaneAlphaFlags};
use vulkan::vk::{VkExtent2D,RawVkExtent2D};

/// Wrapper for [VkDisplaySurfaceCreateInfoKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDisplaySurfaceCreateInfoKHR.html).
#[derive(Debug, Clone)]
pub struct VkDisplaySurfaceCreateInfo {
    pub flags: VkDisplaySurfaceCreateFlags,
    pub display_mode: VkDisplayMode,
    pub plane_index: usize,
    pub plane_stack_index: usize,
    pub transform: VkSurfaceTransformFlags,
    pub global_alpha: f32,
    pub alpha_mode: VkDisplayPlaneAlphaFlags,
    pub image_extent: VkExtent2D,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDisplaySurfaceCreateInfo {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub flags: RawVkDisplaySurfaceCreateFlags,
    pub display_mode: RawVkDisplayMode,
    pub plane_index: u32,
    pub plane_stack_index: u32,
    pub transform: RawVkSurfaceTransformFlags,
    pub global_alpha: f32,
    pub alpha_mode: RawVkDisplayPlaneAlphaFlags,
    pub image_extent: RawVkExtent2D,
}

impl VkWrappedType<RawVkDisplaySurfaceCreateInfo> for VkDisplaySurfaceCreateInfo {
    fn vk_to_raw(src: &VkDisplaySurfaceCreateInfo, dst: &mut RawVkDisplaySurfaceCreateInfo) {
        dst.s_type = vk_to_raw_value(&VkStructureType::DisplaySurfaceCreateInfoKhr);
        dst.next = ptr::null_mut();
        dst.flags = vk_to_raw_value(&src.flags);
        dst.display_mode = vk_to_raw_value(&src.display_mode);
        dst.plane_index = vk_to_raw_value(&src.plane_index);
        dst.plane_stack_index = vk_to_raw_value(&src.plane_stack_index);
        dst.transform = vk_to_raw_value(&src.transform);
        dst.global_alpha = src.global_alpha;
        dst.alpha_mode = vk_to_raw_value(&src.alpha_mode);
        dst.image_extent = vk_to_raw_value(&src.image_extent);
    }
}

impl VkRawType<VkDisplaySurfaceCreateInfo> for RawVkDisplaySurfaceCreateInfo {
    fn vk_to_wrapped(src: &RawVkDisplaySurfaceCreateInfo) -> VkDisplaySurfaceCreateInfo {
        VkDisplaySurfaceCreateInfo {
            flags: RawVkDisplaySurfaceCreateFlags::vk_to_wrapped(&src.flags),
            display_mode: RawVkDisplayMode::vk_to_wrapped(&src.display_mode),
            plane_index: u32::vk_to_wrapped(&src.plane_index),
            plane_stack_index: u32::vk_to_wrapped(&src.plane_stack_index),
            transform: RawVkSurfaceTransformFlags::vk_to_wrapped(&src.transform),
            global_alpha: src.global_alpha,
            alpha_mode: RawVkDisplayPlaneAlphaFlags::vk_to_wrapped(&src.alpha_mode),
            image_extent: RawVkExtent2D::vk_to_wrapped(&src.image_extent),
        }
    }
}

impl Default for VkDisplaySurfaceCreateInfo {
    fn default() -> VkDisplaySurfaceCreateInfo {
        VkDisplaySurfaceCreateInfo {
            flags: Default::default(),
            display_mode: Default::default(),
            plane_index: 0,
            plane_stack_index: 0,
            transform: Default::default(),
            global_alpha: 0.0,
            alpha_mode: Default::default(),
            image_extent: Default::default(),
        }
    }
}

impl VkSetup for VkDisplaySurfaceCreateInfo {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.display_mode, fn_table);
        VkSetup::vk_setup(&mut self.image_extent, fn_table);
    }
}

impl VkFree for RawVkDisplaySurfaceCreateInfo {
    fn vk_free(&self) {
        
    }
}