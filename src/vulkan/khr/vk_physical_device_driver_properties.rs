// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkDriverId,RawVkDriverId};
use vulkan::khr::{VkConformanceVersion,RawVkConformanceVersion};

/// Wrapper for [VkPhysicalDeviceDriverPropertiesKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPhysicalDeviceDriverPropertiesKHR.html).
#[derive(Debug, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    pub driver_id: VkDriverId,
    pub driver_name: String,
    pub driver_info: String,
    pub conformance_version: VkConformanceVersion,
}

#[doc(hidden)]
#[repr(C)]
pub struct RawVkPhysicalDeviceDriverProperties {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub driver_id: RawVkDriverId,
    pub driver_name: [c_char; 256],
    pub driver_info: [c_char; 256],
    pub conformance_version: RawVkConformanceVersion,
}

impl VkRawType<VkPhysicalDeviceDriverProperties> for RawVkPhysicalDeviceDriverProperties {
    fn vk_to_wrapped(src: &RawVkPhysicalDeviceDriverProperties) -> VkPhysicalDeviceDriverProperties {
        VkPhysicalDeviceDriverProperties {
            driver_id: RawVkDriverId::vk_to_wrapped(&src.driver_id),
            driver_name: new_string(&src.driver_name[0] as *const c_char),
            driver_info: new_string(&src.driver_info[0] as *const c_char),
            conformance_version: RawVkConformanceVersion::vk_to_wrapped(&src.conformance_version),
        }
    }
}

impl VkSetup for VkPhysicalDeviceDriverProperties {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.conformance_version, fn_table);
    }
}

impl VkFree for RawVkPhysicalDeviceDriverProperties {
    fn vk_free(&self) {
        
    }
}