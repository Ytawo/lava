// Generated by `scripts/generate.js`

use utils::c_bindings::*;
use utils::vk_traits::*;
use utils::vk_ptr::*;
use utils::vk_convert::*;
use std::os::raw::c_char;
use std::ops::Drop;
use std::ptr;
use std::mem;
use std::cmp;
use std::slice;
use vulkan::*;
use vulkan::vk::*;

#[doc(hidden)]
pub type RawVkSurface = u64;

/// Wrapper for [VkSurfaceKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSurfaceKHR.html).
#[derive(Debug, Clone, Copy)]
pub struct VkSurface {
    _handle: RawVkSurface,
    _fn_table: *mut VkFunctionTable
}

impl VkRawType<VkSurface> for RawVkSurface {
    fn vk_to_wrapped(src: &RawVkSurface) -> VkSurface {
        VkSurface {
            _handle: *src,
            _fn_table: ptr::null_mut()
        }
    }
}

impl VkWrappedType<RawVkSurface> for VkSurface {
    fn vk_to_raw(src: &VkSurface, dst: &mut RawVkSurface) {
        *dst = src._handle
    }
}

impl Default for VkSurface {
    fn default() -> VkSurface {
        VkSurface {
            _handle: 0,
            _fn_table: ptr::null_mut()
        }
    }
}

impl PartialEq for VkSurface {
    fn eq(&self, other: &VkSurface) -> bool {
        self._handle == other._handle
    }
}

impl VkSetup for VkSurface {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        self._fn_table = fn_table;
    }
}

impl VkSurface {
    
    /// Returns the internal Vulkan handle for the object.
    pub fn vk_handle(&self) -> u64 {
        self._handle
    }
    
    /// Wrapper for [vkDestroySurfaceKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/vkDestroySurfaceKHR.html).
    pub fn destroy(&self) {
        unsafe {
            ((&*self._fn_table).vkDestroySurfaceKHR)((*self._fn_table).instance, self._handle, ptr::null());
        }
    }
}