// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkFormat,RawVkFormat};
use vulkan::khr::{VkColorSpace,RawVkColorSpace};

/// Wrapper for [VkSurfaceFormatKHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkSurfaceFormatKHR.html).
#[derive(Debug, Clone)]
pub struct VkSurfaceFormat {
    pub format: VkFormat,
    pub color_space: VkColorSpace,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkSurfaceFormat {
    pub format: RawVkFormat,
    pub color_space: RawVkColorSpace,
}

impl VkWrappedType<RawVkSurfaceFormat> for VkSurfaceFormat {
    fn vk_to_raw(src: &VkSurfaceFormat, dst: &mut RawVkSurfaceFormat) {
        dst.format = vk_to_raw_value(&src.format);
        dst.color_space = vk_to_raw_value(&src.color_space);
    }
}

impl VkRawType<VkSurfaceFormat> for RawVkSurfaceFormat {
    fn vk_to_wrapped(src: &RawVkSurfaceFormat) -> VkSurfaceFormat {
        VkSurfaceFormat {
            format: RawVkFormat::vk_to_wrapped(&src.format),
            color_space: RawVkColorSpace::vk_to_wrapped(&src.color_space),
        }
    }
}

impl Default for VkSurfaceFormat {
    fn default() -> VkSurfaceFormat {
        VkSurfaceFormat {
            format: Default::default(),
            color_space: Default::default(),
        }
    }
}

impl VkSetup for VkSurfaceFormat {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        
    }
}

impl VkFree for RawVkSurfaceFormat {
    fn vk_free(&self) {
        
    }
}