// Generated by `scripts/generate.js`

use std::os::raw::c_char;
use std::ops::Deref;
use std::ptr;
use std::cmp;
use std::mem;
use utils::c_bindings::*;
use utils::vk_convert::*;
use utils::vk_null::*;
use utils::vk_ptr::*;
use utils::vk_traits::*;
use vulkan::vk::*;
use vulkan::vk::{VkStructureType,RawVkStructureType};
use vulkan::khr::{VkDisplayPlaneProperties,RawVkDisplayPlaneProperties};

/// Wrapper for [VkDisplayPlaneProperties2KHR](https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkDisplayPlaneProperties2KHR.html).
#[derive(Debug, Clone)]
pub struct VkDisplayPlaneProperties2 {
    pub display_plane_properties: VkDisplayPlaneProperties,
}

#[doc(hidden)]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RawVkDisplayPlaneProperties2 {
    pub s_type: RawVkStructureType,
    pub next: *mut c_void,
    pub display_plane_properties: RawVkDisplayPlaneProperties,
}

impl VkRawType<VkDisplayPlaneProperties2> for RawVkDisplayPlaneProperties2 {
    fn vk_to_wrapped(src: &RawVkDisplayPlaneProperties2) -> VkDisplayPlaneProperties2 {
        VkDisplayPlaneProperties2 {
            display_plane_properties: RawVkDisplayPlaneProperties::vk_to_wrapped(&src.display_plane_properties),
        }
    }
}

impl VkSetup for VkDisplayPlaneProperties2 {
    fn vk_setup(&mut self, fn_table: *mut VkFunctionTable) {
        VkSetup::vk_setup(&mut self.display_plane_properties, fn_table);
    }
}

impl VkFree for RawVkDisplayPlaneProperties2 {
    fn vk_free(&self) {
        
    }
}